<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kael Li</title>
    <link>https://kaelli1234.github.io/</link>
    <description>Recent content on Kael Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 08 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kaelli1234.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL查询优化之延迟关联</title>
      <link>https://kaelli1234.github.io/posts/2018/11/08/go-mgo/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2018/11/08/go-mgo/</guid>
      <description>最近项目上遇到了由于一个分页查询的业务导致请求超时，页面无法正常显示的情况。分析解决问题后，记录下备忘。
 简单描述下业务，是一张用来记录用户操作行为的表，数据量大概在1500W左右。前端用户通过选择类型，时间等筛选，得到分页结果。
 表结构如下
| t_operate_6 | CREATE TABLE `t_operate_6` ( `Fid` int(11) unsigned NOT NULL AUTO_INCREMENT, `Fcid` bigint(20) unsigned NOT NULL, `Fuid` bigint(20) unsigned NOT NULL, `Fname` varchar(32) DEFAULT NULL, `FroleName` varchar(64) NOT NULL, `Faction` int(2) NOT NULL, `FobjectId` varchar(64) DEFAULT NULL, `FobjectName` varchar(64) DEFAULT NULL, `Fip` varchar(64) DEFAULT NULL, `Fdevtype` int(2) NOT NULL DEFAULT &#39;0&#39;, `Fctime` int(11) unsigned NOT NULL, PRIMARY KEY (`Fid`), KEY `Fcid` (`Fcid`), KEY `Fuid` (`Fuid`), KEY `Fctime` (`Fctime`), ) ENGINE=InnoDB AUTO_INCREMENT=14491762 DEFAULT CHARSET=utf8 |   业务其实并不复杂，原来的实现逻辑基本基于以下俩条SQL语句。（以下数据基于本地测试库，添加了SQL_NO_CACHE条件避免查询语句被缓存）</description>
    </item>
    
    <item>
      <title>Golang 执行系统外部命令</title>
      <link>https://kaelli1234.github.io/posts/2018/09/29/go-exec/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2018/09/29/go-exec/</guid>
      <description>最近在做php服务迁移，遇到了需要调用系统外部命令(ffmpeg)，处理视频预览图的情况，以前php是直接找了轮子(php-ffmpeg)解决的，但本质其实也就是调用了相关函数执行系统外部的命令。golang也有os/exec这个包支持，标注一下备忘。
1、其实主要是以下几个方法
func Command(name string, arg ...string) *Cmd func (c *Cmd) Output() ([]byte, error) func (c *Cmd) CombinedOutput() ([]byte, error) 通过调用exec.Command()执行系统外部命令，通过*Cmd.Output()或者*Cmd.CombinedOutput()获取执行结果输出。 需要注意的是exec.Command()这个方法的传参。
例如下面的命名：ffmpeg -i input.flv -ss 00:00:14.435 -vframes 1 out.png
对应的调用方式是：exec.Command(&amp;quot;ffmpeg&amp;quot;, &amp;quot;-i&amp;quot;, &amp;quot;input.flv&amp;quot;, &amp;quot;-ss&amp;quot;, &amp;quot;00:00:00&amp;quot;, &amp;quot;-vframes&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;out.png&amp;quot;)
2、针对1中提到的情况，写了个例子。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { cmd := &amp;#34;/usr/local/bin/ffmpeg&amp;#34; args := &amp;#34;-i %s -ss 00:00:00 -vframes 1 %s&amp;#34; output, err := exec.Command(cmd, strings.Split(fmt.Sprintf(args, &amp;#34;input.flv&amp;#34;, &amp;#34;out.png&amp;#34;), &amp;#34; &amp;#34;).</description>
    </item>
    
    <item>
      <title>Golang mgo 使用心得</title>
      <link>https://kaelli1234.github.io/posts/2018/06/29/go-mgo/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2018/06/29/go-mgo/</guid>
      <description>最近在使用mgo的过程中遇到了一些问题，总结标记一下。
1、关于mgo的连接池问题。相关的几个方法如下
Dial(url string) (*Session, error) func (*Session) Clone() *Session func (*Session) Copy() *Session 用以上三个方法得到的Session，使用完后需要Close()，如果不close的话，连接池中的session会一直增加，直到默认配置的4096。之后获取session的协程会sleep等待，直到有可用的session。业务端的表现就是程序挂死，类似死锁的表现😂。所以session用完后一定要defer close掉。
2、针对1中提到的情况，写了个方法调用mgo Collection下对应的函数。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;gopkg.in/mgo.v2&amp;#34; ) var ( session *mgo.Session ) func Session() *mgo.Session { if session == nil { var err error session, err = mgo.Dial(&amp;#34;root:root@127.0.0.1:27017&amp;#34;) if err != nil { panic(err) } } return session.Clone() } func Magic(database string, collection string, f func(*mgo.Collection) error) error { session := Session() defer func() { if session !</description>
    </item>
    
    <item>
      <title>PHP7.2 AES加解密</title>
      <link>https://kaelli1234.github.io/posts/2018/01/18/php72-aes/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2018/01/18/php72-aes/</guid>
      <description> 由于Mcrypt库从PHP 7.1.0 开始废弃；自 PHP 7.2.0 起，会移到 PECL。
 所以之前使用PHP AES加解密的相关函数（mcrypt_encrypt、mcrypt_decrypt&amp;hellip;）在PHP7.1+中都已经废除了，新版PHP中通过OpenSSL库的相关方法来实现AES等加解密。
 openssl_encrypt openssl_decrypt
 其实手册上的说明已经非常清楚了，但是函数声明中的options参数的说明让我很困惑，经过实践后整理结论如下
    options value 说明     NULL 0 返回base64编码后的字符串   OPENSSL_RAW_DATA 1 返回原始字符串   OPENSSL_ZERO_PADDING 2 不填充字符串（默认使用PKCS#7填充字符串）     所以之前用mcrypt_encrypt方法加密得到的密文，在新版中只要用openssl_decrypt方法并且使用options=0来解密即可。
参考
 https://secure.php.net/manual/zh/function.openssl-encrypt.php#117208 https://secure.php.net/manual/zh/function.openssl-decrypt.php#119577  </description>
    </item>
    
    <item>
      <title>Golang中的JSON处理技巧</title>
      <link>https://kaelli1234.github.io/posts/2017/07/18/go-struct-nil-pointer/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2017/07/18/go-struct-nil-pointer/</guid>
      <description>又好久没有更新博客了，最近因为项目需要学习了下Go语言，才真正明白了为什么说PHP是世界上最好的语言🤣。言归正传，首先先推荐本秘籍 build-web-application-with-golang Github上的高星项目，作者同时也是beego框架的开发者，本项目是作者使用Go进行Web开发的经验总结，满满的干货。
所以基础的JSON处理就直接参考文档吧，主要内容大概是Go中有专门的JSON包来处理JSON数据，通过定义对应的struct，tag映射字段，很方便的可以把JSON数据转成struct，或者把struct转化成JSON字符串。
其中文档中有段描述是这样的：
 tag中如果带有&amp;rdquo;omitempty&amp;rdquo;选项，那么如果该字段值为空，就不会输出到JSON串中，这其实是一个比较常见的需求，当某个字段为空时，我们不希望该字段也输出在JSON字符串中，通过在结构体的tag中定义omitempty就可以达到该目的。
 type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } type DataAttachmentHead struct { Text string `json:&amp;#34;text,omitempty&amp;#34;` Bgcolor string `json:&amp;#34;bgcolor,omitempty&amp;#34;` Tcolor string `json:&amp;#34;tcolor,omitempty&amp;#34;` } type DataAttachmentBody struct { Title string `json:&amp;#34;title,omitempty&amp;#34;` Image string `json:&amp;#34;image,omitempty&amp;#34;` Content string `json:&amp;#34;content,omitempty&amp;#34;` } 以上DataAttachment这个结构，通过对head，body定义omitempty选项，我们预期是希望如果当head，body为空时，可以不输出这2个字段到JSON中。但是事实上却和我们预期的有所差异，我们通过json.Marshal得到的JSON中还是会有空的head和body。
所以我们要怎样才能实现我们的目的呢？其实很简单，传指针
type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head *DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body *DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } 参考
 https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md build-web-application-with-golang https://stackoverflow.</description>
    </item>
    
    <item>
      <title>Lumen中使用ValidatorMiddleware中间件处理请求参数验证</title>
      <link>https://kaelli1234.github.io/posts/2017/03/08/validator-middleware/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2017/03/08/validator-middleware/</guid>
      <description>本次文章的缘由来之下面这段代码
public function test() { $message = [ &amp;#39;object_id.required&amp;#39; =&amp;gt; ErrorCode::PARAM_MISS, ]; $validator = Validator::make($this-&amp;gt;request-&amp;gt;all(), [ &amp;#39;object_id&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;, ], $message); if ($validator-&amp;gt;fails()) { ...error } ... } 上面这个场景应该应该大家都不会陌生，验证请求参数是一个非常基础的场景，当需要验证的参数较少时看上去也还能勉强接受，但如果接口接收的参数较多时就会变成这样😂
 （其实还有10+个参数的图，考虑到密集恐惧症患者的感受没有发🙂）好吧，没办法。谁让我们这个接口接收的参数多呢！怎么办，我也很无奈呀！
思考：真的没有办法吗？我review了最近写的几个controller，发现了一个共同点：每一个接口请求对应的处理的方法中，第一段都是处理对应的参数验证的逻辑，这段逻辑除了对应接口的验证规则不一样，其他都是调用相同的逻辑。其实都是重复的代码！怎么样可以把这些代码优化一下呢？
好，通过分析上面的问题，我的第一反应是引用中间件来统一处理这部分的逻辑。网上找了下相关的处理方式，并且参考了下Laravel FormRequest的实现，我设计了ValidatorMiddleware中间件来解决这个问题，代码如下。
namespace App\Http\Middleware; use Closure; class ValidatorMiddleware { /** * Handle an incoming request. * * @param \Illuminate\Http\Request $request * @param \Closure $next * @return mixed */ public function handle($request, Closure $next) { list($controller, $method) = explode(&amp;#39;@&amp;#39;, $request-&amp;gt;route()[1][&amp;#39;uses&amp;#39;]); $class = str_replace(&amp;#39;Controller&amp;#39;, &amp;#39;Request&amp;#39;, $controller); if (class_exists($class)) { $messageRequest = new $class($request, $method); $messageRequest-&amp;gt;validate(); } return $next($request); } }/** Request处理基类 **/ namespace App\Http\Requests; use Illuminate\Http\Request; use App\Exceptions\ResponseException; use Validator; class BaseRequest { protected $input; protected $method; public function __construct(Request $request, String $method) { $this-&amp;gt;input = $request-&amp;gt;all(); $this-&amp;gt;method = $method; } public function rules() { return []; } public function messages() { return []; } public function validate() { $rules = array_get($this-&amp;gt;rules(), $this-&amp;gt;method, []); $messages = array_get($this-&amp;gt;messages(), $this-&amp;gt;method, []); $validator = Validator::make($this-&amp;gt;input, $rules, $messages); if ($validator-&amp;gt;fails()) { $err = $validator-&amp;gt;errors()-&amp;gt;all(); throw new ResponseException(head($err)); } return true; } } 下面结合实际的例子来讲解:</description>
    </item>
    
    <item>
      <title>php通过定义JSON Schema来校验对应JSON的格式数据</title>
      <link>https://kaelli1234.github.io/posts/2017/03/01/json-schema-validate/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2017/03/01/json-schema-validate/</guid>
      <description>最近项目中遇到的需求，对于某JSON类型的字段，要做验证的格式校验，并且标出错误的地方。
本着不要重复造轮子的原则，在github上找到了这个项目
 通过定义固定格式的JSON Schema来验证对应格式的数据。
https://github.com/justinrainbow/json-schema
 具体的使用方法就不多说啦，通过composer安装，参照示例就好。
主要说一下JSON Schema文件的定义问题，👇结合一个比较复杂的例子来说一下Schema各个参数的作用
{ &amp;#34;title&amp;#34;: &amp;#34;Product set&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;array&amp;#34;, //原数据格式为数组 &amp;#34;minItems&amp;#34;: 1, //最少1个元素 &amp;#34;maxItems&amp;#34;: 10, //最多10个元素 &amp;#34;uniqueItems&amp;#34;: true, //数据重复判断 &amp;#34;items&amp;#34;: { &amp;#34;title&amp;#34;: &amp;#34;Product&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, //数组元素的值为对象 &amp;#34;properties&amp;#34;: { &amp;#34;id&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;The unique identifier for a product&amp;#34;, //id字段描述 &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //id的类型为string &amp;#34;pattern&amp;#34;: &amp;#34;^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$&amp;#34; //验证id是否符合该正则表达式的规则 }, &amp;#34;name&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //name的类型为string &amp;#34;maxLength&amp;#34;: 10 //最大长度为10 }, &amp;#34;url&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //url的类型为string &amp;#34;format&amp;#34;: &amp;#34;uri&amp;#34; //并且符合URI规则 }, &amp;#34;price&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;number&amp;#34;, //price的类型为number &amp;#34;minimum&amp;#34;: 0, //最小值为0 &amp;#34;exclusiveMinimum&amp;#34;: true //该字段为true时验证price&amp;gt;0,false时验证price&amp;gt;=0 }, &amp;#34;tags&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //tags的类型为string &amp;#34;enum&amp;#34;: [ //并且值为enum中之一 &amp;#34;food&amp;#34;, &amp;#34;fruit&amp;#34;, &amp;#34;juice&amp;#34; ] } }, &amp;#34;additionalProperties&amp;#34;: false, //不允许除了items.</description>
    </item>
    
    <item>
      <title>基于Lumen框架构建基础的Web API服务</title>
      <link>https://kaelli1234.github.io/posts/2017/02/10/imooc-lumen-api/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2017/02/10/imooc-lumen-api/</guid>
      <description>巧合下跟慕课网有过合作，虽然后来因为个人工作时间的关系没有深入进行下去，但是也算借着这个机会锻炼一下自己，梳理了下自己所掌握的知识，在这里跟大家做个分享，欢迎大家指教。</description>
    </item>
    
    <item>
      <title>PHP最佳实践，规范，相关资源整理</title>
      <link>https://kaelli1234.github.io/posts/2017/01/03/php-doc/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2017/01/03/php-doc/</guid>
      <description>标记整理下书签
 PHP
 PHP 手册 PHP The Right Way PHP-FIG PSR中文版  Laravel
 Laravel China Laravel 的中大型專案架構 胖胖Model減重的五個方法  Tools &amp;amp;&amp;amp; Docs
 对 REST 的理解 Mastering Markdown Awesome Mac APIDOC 简明 VIM 练级攻略   持续更新</description>
    </item>
    
    <item>
      <title>一道有关MySQL查询语句的面试题</title>
      <link>https://kaelli1234.github.io/posts/2016/10/10/mysql-query/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kaelli1234.github.io/posts/2016/10/10/mysql-query/</guid>
      <description>最近闲来无事，突然想起来之前在群里看到的一个有关MySQL查询语句的面试题，跟大家分享，顺便留作备忘。
原始数据如下：
    id data name date     1 30 kael 20160718   2 30 soul 20160720   3 66 kael 20160719   4 52 soul 20160719   5 99 kael 20160720   6 82 soul 20160718     希望通过SQL语句得到如下结果：
    name Data_18 Data_19 Data_20     kael 30 66 99   soul 82 52 30     太久没写原生查询语句，暂时想到的SQL语句如下：</description>
    </item>
    
  </channel>
</rss>