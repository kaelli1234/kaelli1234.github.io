<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Kael Li</title>
    <link>http://www.lilinjian.com/tags/golang/</link>
    <description>Recent content in golang on Kael Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 29 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.lilinjian.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 执行系统外部命令</title>
      <link>http://www.lilinjian.com/posts/2018/09/29/go-exec/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lilinjian.com/posts/2018/09/29/go-exec/</guid>
      <description>最近在做php服务迁移，遇到了需要调用系统外部命令(ffmpeg)，处理视频预览图的情况，以前php是直接找了轮子(php-ffmpeg)解决的，但本质其实也就是调用了相关函数执行系统外部的命令。golang也有os/exec这个包支持，标注一下备忘。
1、其实主要是以下几个方法
func Command(name string, arg ...string) *Cmd func (c *Cmd) Output() ([]byte, error) func (c *Cmd) CombinedOutput() ([]byte, error) 通过调用exec.Command()执行系统外部命令，通过*Cmd.Output()或者*Cmd.CombinedOutput()获取执行结果输出。 需要注意的是exec.Command()这个方法的传参。
例如下面的命名：ffmpeg -i input.flv -ss 00:00:14.435 -vframes 1 out.png
对应的调用方式是：exec.Command(&amp;quot;ffmpeg&amp;quot;, &amp;quot;-i&amp;quot;, &amp;quot;input.flv&amp;quot;, &amp;quot;-ss&amp;quot;, &amp;quot;00:00:00&amp;quot;, &amp;quot;-vframes&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;out.png&amp;quot;)
2、针对1中提到的情况，写了个例子。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { cmd := &amp;#34;/usr/local/bin/ffmpeg&amp;#34; args := &amp;#34;-i %s -ss 00:00:00 -vframes 1 %s&amp;#34; output, err := exec.Command(cmd, strings.Split(fmt.Sprintf(args, &amp;#34;input.flv&amp;#34;, &amp;#34;out.png&amp;#34;), &amp;#34; &amp;#34;).</description>
    </item>
    
    <item>
      <title>Golang mgo 使用心得</title>
      <link>http://www.lilinjian.com/posts/2018/06/29/go-mgo/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lilinjian.com/posts/2018/06/29/go-mgo/</guid>
      <description>最近在使用mgo的过程中遇到了一些问题，总结标记一下。
1、关于mgo的连接池问题。相关的几个方法如下
Dial(url string) (*Session, error) func (*Session) Clone() *Session func (*Session) Copy() *Session 用以上三个方法得到的Session，使用完后需要Close()，如果不close的话，连接池中的session会一直增加，直到默认配置的4096。之后获取session的协程会sleep等待，直到有可用的session。业务端的表现就是程序挂死，类似死锁的表现😂。所以session用完后一定要defer close掉。
2、针对1中提到的情况，写了个方法调用mgo Collection下对应的函数。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;gopkg.in/mgo.v2&amp;#34; ) var ( session *mgo.Session ) func Session() *mgo.Session { if session == nil { var err error session, err = mgo.Dial(&amp;#34;root:root@127.0.0.1:27017&amp;#34;) if err != nil { panic(err) } } return session.Clone() } func Magic(database string, collection string, f func(*mgo.Collection) error) error { session := Session() defer func() { if session !</description>
    </item>
    
    <item>
      <title>Golang中的JSON处理技巧</title>
      <link>http://www.lilinjian.com/posts/2017/07/18/go-struct-nil-pointer/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.lilinjian.com/posts/2017/07/18/go-struct-nil-pointer/</guid>
      <description>又好久没有更新博客了，最近因为项目需要学习了下Go语言，才真正明白了为什么说PHP是世界上最好的语言🤣。言归正传，首先先推荐本秘籍 build-web-application-with-golang Github上的高星项目，作者同时也是beego框架的开发者，本项目是作者使用Go进行Web开发的经验总结，满满的干货。
所以基础的JSON处理就直接参考文档吧，主要内容大概是Go中有专门的JSON包来处理JSON数据，通过定义对应的struct，tag映射字段，很方便的可以把JSON数据转成struct，或者把struct转化成JSON字符串。
其中文档中有段描述是这样的：
 tag中如果带有&amp;rdquo;omitempty&amp;rdquo;选项，那么如果该字段值为空，就不会输出到JSON串中，这其实是一个比较常见的需求，当某个字段为空时，我们不希望该字段也输出在JSON字符串中，通过在结构体的tag中定义omitempty就可以达到该目的。
 type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } type DataAttachmentHead struct { Text string `json:&amp;#34;text,omitempty&amp;#34;` Bgcolor string `json:&amp;#34;bgcolor,omitempty&amp;#34;` Tcolor string `json:&amp;#34;tcolor,omitempty&amp;#34;` } type DataAttachmentBody struct { Title string `json:&amp;#34;title,omitempty&amp;#34;` Image string `json:&amp;#34;image,omitempty&amp;#34;` Content string `json:&amp;#34;content,omitempty&amp;#34;` } 以上DataAttachment这个结构，通过对head，body定义omitempty选项，我们预期是希望如果当head，body为空时，可以不输出这2个字段到JSON中。但是事实上却和我们预期的有所差异，我们通过json.Marshal得到的JSON中还是会有空的head和body。
所以我们要怎样才能实现我们的目的呢？其实很简单，传指针
type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head *DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body *DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } 参考
 https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md build-web-application-with-golang https://stackoverflow.</description>
    </item>
    
  </channel>
</rss>