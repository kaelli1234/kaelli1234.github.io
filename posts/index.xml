<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Kael Li</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Kael Li</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 08 Nov 2018 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>MySQL查询优化之延迟关联</title>
            <link>/posts/2018/11/08/mysql-deferred-join/</link>
            <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
            
            <guid>/posts/2018/11/08/mysql-deferred-join/</guid>
            <description>最近项目上遇到了由于一个分页查询的业务导致请求超时，页面无法正常显示的情况。分析解决问题后，记录下备忘。
 简单描述下业务，是一张用来记录用户操作行为的表，数据量大概在1500W左右。前端用户通过选择类型，时间等筛选，得到分页结果。
 表结构如下
| t_operate_6 | CREATE TABLE `t_operate_6` ( `Fid` int(11) unsigned NOT NULL AUTO_INCREMENT, `Fcid` bigint(20) unsigned NOT NULL, `Fuid` bigint(20) unsigned NOT NULL, `Fname` varchar(32) DEFAULT NULL, `FroleName` varchar(64) NOT NULL, `Faction` int(2) NOT NULL, `FobjectId` varchar(64) DEFAULT NULL, `FobjectName` varchar(64) DEFAULT NULL, `Fip` varchar(64) DEFAULT NULL, `Fdevtype` int(2) NOT NULL DEFAULT &#39;0&#39;, `Fctime` int(11) unsigned NOT NULL, PRIMARY KEY (`Fid`), KEY `Fcid` (`Fcid`), KEY `Fuid` (`Fuid`), KEY `Fctime` (`Fctime`), ) ENGINE=InnoDB AUTO_INCREMENT=14491762 DEFAULT CHARSET=utf8 |   业务其实并不复杂，原来的实现逻辑基本基于以下俩条SQL语句。（以下数据基于本地测试库，添加了SQL_NO_CACHE条件避免查询语句被缓存）</description>
            <content type="html"><![CDATA[

<p>最近项目上遇到了由于一个分页查询的业务导致请求超时，页面无法正常显示的情况。分析解决问题后，记录下备忘。</p>

<blockquote>
<p>简单描述下业务，是一张用来记录用户操作行为的表，数据量大概在1500W左右。前端用户通过选择类型，时间等筛选，得到分页结果。</p>
</blockquote>

<p>表结构如下</p>

<pre><code>| t_operate_6 | CREATE TABLE `t_operate_6` (
  `Fid` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `Fcid` bigint(20) unsigned NOT NULL,
  `Fuid` bigint(20) unsigned NOT NULL,
  `Fname` varchar(32) DEFAULT NULL,
  `FroleName` varchar(64) NOT NULL,
  `Faction` int(2) NOT NULL,
  `FobjectId` varchar(64) DEFAULT NULL,
  `FobjectName` varchar(64) DEFAULT NULL,
  `Fip` varchar(64) DEFAULT NULL,
  `Fdevtype` int(2) NOT NULL DEFAULT '0',
  `Fctime` int(11) unsigned NOT NULL,
  PRIMARY KEY (`Fid`),
  KEY `Fcid` (`Fcid`),
  KEY `Fuid` (`Fuid`),
  KEY `Fctime` (`Fctime`),
) ENGINE=InnoDB AUTO_INCREMENT=14491762 DEFAULT CHARSET=utf8 |
</code></pre>

<blockquote>
<p>业务其实并不复杂，原来的实现逻辑基本基于以下俩条SQL语句。（<strong>以下数据基于本地测试库，添加了SQL_NO_CACHE条件避免查询语句被缓存</strong>）</p>
</blockquote>

<h4 id="根据查询条件得到数据总数-前端显示页数">根据查询条件得到数据总数（前端显示页数）</h4>

<pre><code>mysql&gt; SELECT SQL_NO_CACHE COUNT(*) FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime;
+----------+
| count(*) |
+----------+
|   760611 |
+----------+
1 row in set (1.93 sec)
</code></pre>

<p>可以看到虽然换成了本地测试库只有76W条数据，也耗时了1.93秒，使用explain分析下SQL语句，如下</p>

<pre><code>mysql&gt; EXPLAIN SELECT SQL_NO_CACHE COUNT(*) FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime;
+----+-------------+-------------+------+---------------+------+---------+-------+--------+------------------------------------+
| id | select_type | table       | type | possible_keys | key  | key_len | ref   | rows   | Extra                              |
+----+-------------+-------------+------+---------------+------+---------+-------+--------+------------------------------------+
|  1 | SIMPLE      | t_operate_0 | ref  | Fcid,Fctime   | Fcid | 8       | const | 156317 | Using index condition; Using where |
+----+-------------+-------------+------+---------------+------+---------+-------+--------+------------------------------------+
1 row in set (0.00 sec)
</code></pre>

<h4 id="优化思路">优化思路</h4>

<p>通过建表语句可以看到，只是单独对Fcid、Fctime建了索引。其实针对上面的查询语句，直接对该字段建联合索引即可。<br/>
<strong>CREATE INDEX count ON t_operate_0 (Fcid, Fctime)</strong></p>

<p>再看看查询结果</p>

<pre><code>mysql&gt; SELECT SQL_NO_CACHE COUNT(*) FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime;
+----------+
| COUNT(*) |
+----------+
|   760611 |
+----------+
1 row in set (0.62 sec)

mysql&gt; EXPLAIN SELECT SQL_NO_CACHE COUNT(*) FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime;
+----+-------------+-------------+-------+-------------------+-------+---------+------+--------+--------------------------+
| id | select_type | table       | type  | possible_keys     | key   | key_len | ref  | rows   | Extra                    |
+----+-------------+-------------+-------+-------------------+-------+---------+------+--------+--------------------------+
|  1 | SIMPLE      | t_operate_0 | range | Fcid,Fctime,count | count | 12      | NULL | 156317 | Using where; Using index |
+----+-------------+-------------+-------+-------------------+-------+---------+------+--------+--------------------------+
1 row in set (0.00 sec)
</code></pre>

<p>直接命中了联合索引，查询速度从<strong>1.93</strong>提高到了<strong>0.62</strong>。那还有没有再优化的空间呢？<br/>
<strong>我们仔细分析下业务，前端只需要得到数据总数。其实对应表里就有自增的主键字段，直接返回该字段的最新值即可</strong></p>

<pre><code>mysql&gt; SELECT SQL_NO_CACHE Fid FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime DESC LIMIT 1;
+--------+
| Fid    |
+--------+
| 762059 |
+--------+
1 row in set (0.01 sec)
</code></pre>

<p>仅0.01s就返回了结果！虽然数字和总数有些许出入，但是其实并不影响业务！我们继续看下一条语句。</p>

<h4 id="根据查询条件得到分页数据">根据查询条件得到分页数据</h4>

<pre><code>mysql&gt; SELECT SQL_NO_CACHE * FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime DESC LIMIT 10000, 10;
10 rows in set (6.89 sec)

mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime DESC LIMIT 10000, 10;
+----+-------------+-------------+------+---------------+------+---------+-------+--------+----------------------------------------------------+
| id | select_type | table       | type | possible_keys | key  | key_len | ref   | rows   | Extra                                              |
+----+-------------+-------------+------+---------------+------+---------+-------+--------+----------------------------------------------------+
|  1 | SIMPLE      | t_operate_0 | ref  | Fcid,Fctime   | Fcid | 8       | const | 156317 | Using index condition; Using where; Using filesort |
+----+-------------+-------------+------+---------------+------+---------+-------+--------+----------------------------------------------------+
1 row in set (0.00 sec)
</code></pre>

<h4 id="优化思路-1">优化思路</h4>

<p>条件基本和取总数一致，只是多limit了语句，首先还是应该通过建立联合索引覆盖查询条件(上面已经建好)<br/>
由于limit语句的原因，mysql其实还是先扫描了前10000条数据，丢弃后返回了需要的10条。针对这种情况&lt;&lt;高性能MySQL&gt;&gt;中其实有提到过利用<strong>延迟关联</strong>的方法来提高查询效率。优化后的SQL语句如下</p>

<pre><code>mysql&gt; SELECT SQL_NO_CACHE a.* FROM t_operate_0 a, (SELECT Fid FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime DESC LIMIT 10000, 10) b WHERE a.Fid = b.Fid;
10 rows in set (0.02 sec)

mysql&gt; EXPLAIN SELECT SQL_NO_CACHE a.* FROM t_operate_0 a, (SELECT Fid FROM t_operate_0 WHERE Fcid = 2111131044822780 AND Fctime &gt;= 1505171339 AND Fctime &lt;= 1542992406 ORDER BY Fctime DESC LIMIT 10000, 10) b WHERE a.Fid = b.Fid;
+----+-------------+-------------+--------+-------------------+---------+---------+-------+--------+--------------------------+
| id | select_type | table       | type   | possible_keys     | key     | key_len | ref   | rows   | Extra                    |
+----+-------------+-------------+--------+-------------------+---------+---------+-------+--------+--------------------------+
|  1 | PRIMARY     | &lt;derived2&gt;  | ALL    | NULL              | NULL    | NULL    | NULL  |  10010 | NULL                     |
|  1 | PRIMARY     | a           | eq_ref | PRIMARY           | PRIMARY | 4       | b.Fid |      1 | NULL                     |
|  2 | DERIVED     | t_operate_0 | range  | Fcid,Fctime,count | count   | 12      | NULL  | 156317 | Using where; Using index |
+----+-------------+-------------+--------+-------------------+---------+---------+-------+--------+--------------------------+
3 rows in set (0.00 sec)
</code></pre>

<p>通过建立联合索引和利用<strong>延迟关联</strong>调整SQL语句，查询时间直接从<strong>6.89s</strong>提升到了<strong>0.02s</strong>！</p>

<h4 id="关于延迟关联">关于延迟关联</h4>

<blockquote>
<p>&lt;&lt;高性能MySQL&gt;&gt;

    <img src="/assets/images/mysql-deferred-join.png"  data-action="zoom" alt="mysql-deferred-join"  class="center"  />
</p>
</blockquote>

<h4 id="个人理解">个人理解</h4>

<ul>
<li>原本的语句由于查询条件是<code>SELECT * WHERE ... LIMIT</code>，mysql首先通过where过滤出需要返回的数据，再根据limit扫描数据，丢弃数据，最后返回正确偏移的数据。</li>
<li>优化后的语句首先通过覆盖索引拿到对应的主键，虽然也需要扫描索引数据，但是扫描索引的速度是远远大于扫描数据的，然后再通过主键关联主表得到需要的数据，这样充分利用了索引大大提高了查询效率。</li>
</ul>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://www.cnblogs.com/Java3y/p/9969760.html" target="_blank">https://www.cnblogs.com/Java3y/p/9969760.html</a></li>
<li><a href="https://blog.csdn.net/u012817635/article/details/52277490" target="_blank">https://blog.csdn.net/u012817635/article/details/52277490</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Golang 执行系统外部命令</title>
            <link>/posts/2018/09/29/go-exec/</link>
            <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
            
            <guid>/posts/2018/09/29/go-exec/</guid>
            <description>最近在做php服务迁移，遇到了需要调用系统外部命令(ffmpeg)，处理视频预览图的情况，以前php是直接找了轮子(php-ffmpeg)解决的，但本质其实也就是调用了相关函数执行系统外部的命令。golang也有os/exec这个包支持，标注一下备忘。
1、其实主要是以下几个方法
func Command(name string, arg ...string) *Cmd func (c *Cmd) Output() ([]byte, error) func (c *Cmd) CombinedOutput() ([]byte, error) 通过调用exec.Command()执行系统外部命令，通过*Cmd.Output()或者*Cmd.CombinedOutput()获取执行结果输出。 需要注意的是exec.Command()这个方法的传参。
例如下面的命名：ffmpeg -i input.flv -ss 00:00:14.435 -vframes 1 out.png
对应的调用方式是：exec.Command(&amp;quot;ffmpeg&amp;quot;, &amp;quot;-i&amp;quot;, &amp;quot;input.flv&amp;quot;, &amp;quot;-ss&amp;quot;, &amp;quot;00:00:00&amp;quot;, &amp;quot;-vframes&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;out.png&amp;quot;)
2、针对1中提到的情况，写了个例子。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { cmd := &amp;#34;/usr/local/bin/ffmpeg&amp;#34; args := &amp;#34;-i %s -ss 00:00:00 -vframes 1 %s&amp;#34; output, err := exec.Command(cmd, strings.Split(fmt.Sprintf(args, &amp;#34;input.flv&amp;#34;, &amp;#34;out.png&amp;#34;), &amp;#34; &amp;#34;).</description>
            <content type="html"><![CDATA[<p>最近在做php服务迁移，遇到了需要调用系统外部命令(ffmpeg)，处理视频预览图的情况，以前php是直接找了轮子(php-ffmpeg)解决的，但本质其实也就是调用了相关函数执行系统外部的命令。golang也有os/exec这个包支持，标注一下备忘。</p>

<p>1、其实主要是以下几个方法</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Command</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">arg</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">string</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Cmd</span>
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cmd</span>) <span style="color:#a6e22e">Output</span>() ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>)
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cmd</span>) <span style="color:#a6e22e">CombinedOutput</span>() ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>)</code></pre></div>
<p>通过调用<code>exec.Command()</code>执行系统外部命令，通过<code>*Cmd.Output()</code>或者<code>*Cmd.CombinedOutput()</code>获取执行结果输出。
需要注意的是<code>exec.Command()</code>这个方法的传参。</p>

<p>例如下面的命名：<code>ffmpeg -i input.flv -ss 00:00:14.435 -vframes 1 out.png</code></p>

<p>对应的调用方式是：<code>exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, &quot;input.flv&quot;, &quot;-ss&quot;, &quot;00:00:00&quot;, &quot;-vframes&quot;, &quot;1&quot;, &quot;out.png&quot;)</code></p>

<p>2、针对1中提到的情况，写了个例子。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;os/exec&#34;</span>
    <span style="color:#e6db74">&#34;strings&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;/usr/local/bin/ffmpeg&#34;</span>
    <span style="color:#a6e22e">args</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;-i %s -ss 00:00:00 -vframes 1 %s&#34;</span>
    <span style="color:#a6e22e">output</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#a6e22e">cmd</span>, <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#a6e22e">args</span>, <span style="color:#e6db74">&#34;input.flv&#34;</span>, <span style="color:#e6db74">&#34;out.png&#34;</span>), <span style="color:#e6db74">&#34; &#34;</span>)<span style="color:#f92672">...</span>).<span style="color:#a6e22e">CombinedOutput</span>()
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;err: %v\nout: %v\n&#34;</span>, <span style="color:#a6e22e">err</span>, string(<span style="color:#a6e22e">output</span>))
}</code></pre></div>
<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://golang.org/pkg/os/exec" target="_blank">https://golang.org/pkg/os/exec</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Golang mgo 使用心得</title>
            <link>/posts/2018/06/29/go-mgo/</link>
            <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
            
            <guid>/posts/2018/06/29/go-mgo/</guid>
            <description>最近在使用mgo的过程中遇到了一些问题，总结标记一下。
1、关于mgo的连接池问题。相关的几个方法如下
Dial(url string) (*Session, error) func (*Session) Clone() *Session func (*Session) Copy() *Session 用以上三个方法得到的Session，使用完后需要Close()，如果不close的话，连接池中的session会一直增加，直到默认配置的4096。之后获取session的协程会sleep等待，直到有可用的session。业务端的表现就是程序挂死，类似死锁的表现😂。所以session用完后一定要defer close掉。
2、针对1中提到的情况，写了个方法调用mgo Collection下对应的函数。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;gopkg.in/mgo.v2&amp;#34; ) var ( session *mgo.Session ) func Session() *mgo.Session { if session == nil { var err error session, err = mgo.Dial(&amp;#34;root:root@127.0.0.1:27017&amp;#34;) if err != nil { panic(err) } } return session.Clone() } func Magic(database string, collection string, f func(*mgo.Collection) error) error { session := Session() defer func() { if session !</description>
            <content type="html"><![CDATA[<p>最近在使用mgo的过程中遇到了一些问题，总结标记一下。</p>

<p>1、关于mgo的连接池问题。相关的几个方法如下</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">url</span> <span style="color:#66d9ef">string</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">Session</span>, <span style="color:#66d9ef">error</span>)
<span style="color:#66d9ef">func</span> (<span style="color:#f92672">*</span><span style="color:#a6e22e">Session</span>) <span style="color:#a6e22e">Clone</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">Session</span>
<span style="color:#66d9ef">func</span> (<span style="color:#f92672">*</span><span style="color:#a6e22e">Session</span>) <span style="color:#a6e22e">Copy</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">Session</span></code></pre></div>
<p>用以上三个方法得到的Session，使用完后需要Close()，如果不close的话，连接池中的session会一直增加，直到默认配置的4096。之后获取session的协程会sleep等待，直到有可用的session。业务端的表现就是程序挂死，类似死锁的表现😂。<strong>所以session用完后一定要defer close掉</strong>。</p>

<p>2、针对1中提到的情况，写了个方法调用mgo Collection下对应的函数。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;gopkg.in/mgo.v2&#34;</span>
)

<span style="color:#66d9ef">var</span> (
    <span style="color:#a6e22e">session</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">mgo</span>.<span style="color:#a6e22e">Session</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Session</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">mgo</span>.<span style="color:#a6e22e">Session</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">session</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>
        <span style="color:#a6e22e">session</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">mgo</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#e6db74">&#34;root:root@127.0.0.1:27017&#34;</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">err</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">session</span>.<span style="color:#a6e22e">Clone</span>()
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Magic</span>(<span style="color:#a6e22e">database</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">collection</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">f</span> <span style="color:#66d9ef">func</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">mgo</span>.<span style="color:#a6e22e">Collection</span>) <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">error</span> {
    <span style="color:#a6e22e">session</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Session</span>()
    <span style="color:#66d9ef">defer</span> <span style="color:#66d9ef">func</span>() {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">session</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">session</span>.<span style="color:#a6e22e">Close</span>()
        }
    }()

    <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">session</span>.<span style="color:#a6e22e">DB</span>(<span style="color:#a6e22e">database</span>).<span style="color:#a6e22e">C</span>(<span style="color:#a6e22e">collection</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">c</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">m</span> <span style="color:#66d9ef">interface</span>{}
    <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Magic</span>(<span style="color:#e6db74">&#34;test&#34;</span>, <span style="color:#e6db74">&#34;test&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">mgo</span>.<span style="color:#a6e22e">Collection</span>) <span style="color:#66d9ef">error</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#66d9ef">nil</span>).<span style="color:#a6e22e">One</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">m</span>)
    })
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">m</span>)
}</code></pre></div>
<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://godoc.org/gopkg.in/mgo.v2" target="_blank">https://godoc.org/gopkg.in/mgo.v2</a></li>
<li><a href="http://www.cnblogs.com/shenguanpu/p/5318727.html" target="_blank">http://www.cnblogs.com/shenguanpu/p/5318727.html</a></li>
<li><a href="https://golangtc.com/t/53073b69320b526197000067" target="_blank">https://golangtc.com/t/53073b69320b526197000067</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>PHP7.2 AES加解密</title>
            <link>/posts/2018/01/18/php72-aes/</link>
            <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
            
            <guid>/posts/2018/01/18/php72-aes/</guid>
            <description> 由于Mcrypt库从PHP 7.1.0 开始废弃；自 PHP 7.2.0 起，会移到 PECL。
 所以之前使用PHP AES加解密的相关函数（mcrypt_encrypt、mcrypt_decrypt&amp;hellip;）在PHP7.1+中都已经废除了，新版PHP中通过OpenSSL库的相关方法来实现AES等加解密。
 openssl_encrypt openssl_decrypt
 其实手册上的说明已经非常清楚了，但是函数声明中的options参数的说明让我很困惑，经过实践后整理结论如下
    options value 说明     NULL 0 返回base64编码后的字符串   OPENSSL_RAW_DATA 1 返回原始字符串   OPENSSL_ZERO_PADDING 2 不填充字符串（默认使用PKCS#7填充字符串）     所以之前用mcrypt_encrypt方法加密得到的密文，在新版中只要用openssl_decrypt方法并且使用options=0来解密即可。
参考
 https://secure.php.net/manual/zh/function.openssl-encrypt.php#117208 https://secure.php.net/manual/zh/function.openssl-decrypt.php#119577  </description>
            <content type="html"><![CDATA[<blockquote>
<p><a href="https://secure.php.net/manual/zh/intro.mcrypt.php" target="_blank">由于Mcrypt库从PHP 7.1.0 开始废弃；自 PHP 7.2.0 起，会移到 PECL。</a></p>
</blockquote>

<p>所以之前使用PHP AES加解密的相关函数（<code>mcrypt_encrypt</code>、<code>mcrypt_decrypt</code>&hellip;）在PHP7.1+中都已经废除了，新版PHP中通过OpenSSL库的相关方法来实现AES等加解密。</p>

<blockquote>
<p><a href="https://secure.php.net/manual/zh/function.openssl-encrypt.php" target="_blank">openssl_encrypt</a> <br />
  <a href="https://secure.php.net/manual/zh/function.openssl-decrypt.php" target="_blank">openssl_decrypt</a></p>
</blockquote>

<p>其实手册上的说明已经非常清楚了，但是函数声明中的options参数的说明让我很困惑，经过实践后整理结论如下</p>

<blockquote>
<table>
<thead>
<tr>
<th align="center">options</th>
<th align="center">value</th>
<th align="center">说明</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center"><code>NULL</code></td>
<td align="center">0</td>
<td align="center">返回<code>base64</code>编码后的字符串</td>
</tr>

<tr>
<td align="center"><code>OPENSSL_RAW_DATA</code></td>
<td align="center">1</td>
<td align="center">返回原始字符串</td>
</tr>

<tr>
<td align="center"><code>OPENSSL_ZERO_PADDING</code></td>
<td align="center">2</td>
<td align="center">不填充字符串（默认使用<code>PKCS#7</code>填充字符串）</td>
</tr>
</tbody>
</table>
</blockquote>

<p>所以之前用<code>mcrypt_encrypt</code>方法加密得到的密文，在新版中只要用<code>openssl_decrypt</code>方法并且使用<code>options=0</code>来解密即可。</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://secure.php.net/manual/zh/function.openssl-encrypt.php#117208" target="_blank">https://secure.php.net/manual/zh/function.openssl-encrypt.php#117208</a></li>
<li><a href="https://secure.php.net/manual/zh/function.openssl-decrypt.php#119577" target="_blank">https://secure.php.net/manual/zh/function.openssl-decrypt.php#119577</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Golang中的JSON处理技巧</title>
            <link>/posts/2017/07/18/go-struct-nil-pointer/</link>
            <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
            
            <guid>/posts/2017/07/18/go-struct-nil-pointer/</guid>
            <description>又好久没有更新博客了，最近因为项目需要学习了下Go语言，才真正明白了为什么说PHP是世界上最好的语言🤣。言归正传，首先先推荐本秘籍 build-web-application-with-golang Github上的高星项目，作者同时也是beego框架的开发者，本项目是作者使用Go进行Web开发的经验总结，满满的干货。
所以基础的JSON处理就直接参考文档吧，主要内容大概是Go中有专门的JSON包来处理JSON数据，通过定义对应的struct，tag映射字段，很方便的可以把JSON数据转成struct，或者把struct转化成JSON字符串。
其中文档中有段描述是这样的：
 tag中如果带有&amp;rdquo;omitempty&amp;rdquo;选项，那么如果该字段值为空，就不会输出到JSON串中，这其实是一个比较常见的需求，当某个字段为空时，我们不希望该字段也输出在JSON字符串中，通过在结构体的tag中定义omitempty就可以达到该目的。
 type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } type DataAttachmentHead struct { Text string `json:&amp;#34;text,omitempty&amp;#34;` Bgcolor string `json:&amp;#34;bgcolor,omitempty&amp;#34;` Tcolor string `json:&amp;#34;tcolor,omitempty&amp;#34;` } type DataAttachmentBody struct { Title string `json:&amp;#34;title,omitempty&amp;#34;` Image string `json:&amp;#34;image,omitempty&amp;#34;` Content string `json:&amp;#34;content,omitempty&amp;#34;` } 以上DataAttachment这个结构，通过对head，body定义omitempty选项，我们预期是希望如果当head，body为空时，可以不输出这2个字段到JSON中。但是事实上却和我们预期的有所差异，我们通过json.Marshal得到的JSON中还是会有空的head和body。
所以我们要怎样才能实现我们的目的呢？其实很简单，传指针
type DataAttachment struct { Id string `json:&amp;#34;id,omitempty&amp;#34;` Head *DataAttachmentHead `json:&amp;#34;head,omitempty&amp;#34;` Body *DataAttachmentBody `json:&amp;#34;body,omitempty&amp;#34;` } 参考
 https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md build-web-application-with-golang https://stackoverflow.</description>
            <content type="html"><![CDATA[<p>又好久没有更新博客了，最近因为项目需要学习了下Go语言，才真正明白了为什么说PHP是世界上最好的语言🤣。言归正传，首先先推荐本秘籍
<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank">build-web-application-with-golang</a> Github上的高星项目，作者同时也是beego框架的开发者，本项目是作者使用Go进行Web开发的经验总结，满满的干货。</p>

<p>所以基础的<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md" target="_blank">JSON处理</a>就直接参考文档吧，主要内容大概是Go中有专门的JSON包来处理JSON数据，通过定义对应的struct，tag映射字段，很方便的可以把JSON数据转成struct，或者把struct转化成JSON字符串。</p>

<p>其中文档中有段描述是这样的：</p>

<blockquote>
<p>tag中如果带有&rdquo;omitempty&rdquo;选项，那么如果该字段值为空，就不会输出到JSON串中，这其实是一个比较常见的需求，当某个字段为空时，我们不希望该字段也输出在JSON字符串中，通过在结构体的tag中定义<code>omitempty</code>就可以达到该目的。</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataAttachment</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Id</span>     <span style="color:#66d9ef">string</span>                 <span style="color:#e6db74">`json:&#34;id,omitempty&#34;`</span>
    <span style="color:#a6e22e">Head</span>   <span style="color:#a6e22e">DataAttachmentHead</span>     <span style="color:#e6db74">`json:&#34;head,omitempty&#34;`</span>
    <span style="color:#a6e22e">Body</span>   <span style="color:#a6e22e">DataAttachmentBody</span>     <span style="color:#e6db74">`json:&#34;body,omitempty&#34;`</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataAttachmentHead</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Text</span>    <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;text,omitempty&#34;`</span>
    <span style="color:#a6e22e">Bgcolor</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;bgcolor,omitempty&#34;`</span>
    <span style="color:#a6e22e">Tcolor</span>  <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;tcolor,omitempty&#34;`</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataAttachmentBody</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Title</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;title,omitempty&#34;`</span>
    <span style="color:#a6e22e">Image</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;image,omitempty&#34;`</span>
    <span style="color:#a6e22e">Content</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;content,omitempty&#34;`</span>
}</code></pre></div>
<p>以上DataAttachment这个结构，通过对head，body定义omitempty选项，我们预期是希望如果当head，body为空时，可以不输出这2个字段到JSON中。但是事实上却和我们预期的有所差异，我们通过<code>json.Marshal</code>得到的JSON中还是会有空的head和body。</p>

<p>所以我们要怎样才能实现我们的目的呢？其实很简单，<strong>传指针</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataAttachment</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Id</span>     <span style="color:#66d9ef">string</span>                 <span style="color:#e6db74">`json:&#34;id,omitempty&#34;`</span>
    <span style="color:#a6e22e">Head</span>   <span style="color:#f92672">*</span><span style="color:#a6e22e">DataAttachmentHead</span>     <span style="color:#e6db74">`json:&#34;head,omitempty&#34;`</span>
    <span style="color:#a6e22e">Body</span>   <span style="color:#f92672">*</span><span style="color:#a6e22e">DataAttachmentBody</span>     <span style="color:#e6db74">`json:&#34;body,omitempty&#34;`</span>
}</code></pre></div>
<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md" target="_blank">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank">build-web-application-with-golang</a></li>
<li><a href="https://stackoverflow.com/questions/18088294/how-to-not-marshal-an-empty-struct-into-json-with-go" target="_blank">https://stackoverflow.com/questions/18088294/how-to-not-marshal-an-empty-struct-into-json-with-go</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Lumen中使用ValidatorMiddleware中间件处理请求参数验证</title>
            <link>/posts/2017/03/08/validator-middleware/</link>
            <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
            
            <guid>/posts/2017/03/08/validator-middleware/</guid>
            <description>本次文章的缘由来之下面这段代码
public function test() { $message = [ &amp;#39;object_id.required&amp;#39; =&amp;gt; ErrorCode::PARAM_MISS, ]; $validator = Validator::make($this-&amp;gt;request-&amp;gt;all(), [ &amp;#39;object_id&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;, ], $message); if ($validator-&amp;gt;fails()) { ...error } ... } 上面这个场景应该应该大家都不会陌生，验证请求参数是一个非常基础的场景，当需要验证的参数较少时看上去也还能勉强接受，但如果接口接收的参数较多时就会变成这样😂
 （其实还有10+个参数的图，考虑到密集恐惧症患者的感受没有发🙂）好吧，没办法。谁让我们这个接口接收的参数多呢！怎么办，我也很无奈呀！
思考：真的没有办法吗？我review了最近写的几个controller，发现了一个共同点：每一个接口请求对应的处理的方法中，第一段都是处理对应的参数验证的逻辑，这段逻辑除了对应接口的验证规则不一样，其他都是调用相同的逻辑。其实都是重复的代码！怎么样可以把这些代码优化一下呢？
好，通过分析上面的问题，我的第一反应是引用中间件来统一处理这部分的逻辑。网上找了下相关的处理方式，并且参考了下Laravel FormRequest的实现，我设计了ValidatorMiddleware中间件来解决这个问题，代码如下。
namespace App\Http\Middleware; use Closure; class ValidatorMiddleware { /** * Handle an incoming request. * * @param \Illuminate\Http\Request $request * @param \Closure $next * @return mixed */ public function handle($request, Closure $next) { list($controller, $method) = explode(&amp;#39;@&amp;#39;, $request-&amp;gt;route()[1][&amp;#39;uses&amp;#39;]); $class = str_replace(&amp;#39;Controller&amp;#39;, &amp;#39;Request&amp;#39;, $controller); if (class_exists($class)) { $messageRequest = new $class($request, $method); $messageRequest-&amp;gt;validate(); } return $next($request); } }/** Request处理基类 **/ namespace App\Http\Requests; use Illuminate\Http\Request; use App\Exceptions\ResponseException; use Validator; class BaseRequest { protected $input; protected $method; public function __construct(Request $request, String $method) { $this-&amp;gt;input = $request-&amp;gt;all(); $this-&amp;gt;method = $method; } public function rules() { return []; } public function messages() { return []; } public function validate() { $rules = array_get($this-&amp;gt;rules(), $this-&amp;gt;method, []); $messages = array_get($this-&amp;gt;messages(), $this-&amp;gt;method, []); $validator = Validator::make($this-&amp;gt;input, $rules, $messages); if ($validator-&amp;gt;fails()) { $err = $validator-&amp;gt;errors()-&amp;gt;all(); throw new ResponseException(head($err)); } return true; } } 下面结合实际的例子来讲解:</description>
            <content type="html"><![CDATA[<p>本次文章的缘由来之下面这段代码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">public function test()
{
    $message = [
        &#39;object_id.required&#39; =&gt; ErrorCode::PARAM_MISS,
    ];
    $validator = Validator::make($this-&gt;request-&gt;all(), [
        &#39;object_id&#39; =&gt; &#39;required&#39;,
    ], $message);
    if ($validator-&gt;fails()) {
        ...error
    }
    ...
}</code></pre></div>
<p>上面这个场景应该应该大家都不会陌生，验证请求参数是一个非常基础的场景，当需要验证的参数较少时看上去也还能勉强接受，但如果接口接收的参数较多时就会变成这样😂</p>

<p>
    <img src="/assets/images/validator-middleware-1.png"  data-action="zoom" alt="validator-middleware-1"  class="center"  />

（其实还有10+个参数的图，考虑到密集恐惧症患者的感受没有发🙂）好吧，没办法。谁让我们这个接口接收的参数多呢！怎么办，我也很无奈呀！</p>

<p><strong>思考</strong>：真的没有办法吗？我review了最近写的几个controller，发现了一个共同点：每一个接口请求对应的处理的方法中，第一段都是处理对应的参数验证的逻辑，这段逻辑除了对应接口的验证规则不一样，其他都是调用相同的逻辑。其实都是重复的代码！怎么样可以把这些代码优化一下呢？</p>

<p>好，通过分析上面的问题，我的第一反应是引用中间件来统一处理这部分的逻辑。网上找了下相关的处理方式，并且参考了下Laravel FormRequest的实现，我设计了ValidatorMiddleware中间件来解决这个问题，代码如下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">namespace App\Http\Middleware;

use Closure;

class ValidatorMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        list($controller, $method) = explode(&#39;@&#39;, $request-&gt;route()[1][&#39;uses&#39;]);
        $class = str_replace(&#39;Controller&#39;, &#39;Request&#39;, $controller);
        if (class_exists($class)) {
            $messageRequest = new $class($request, $method);
            $messageRequest-&gt;validate();
        }

        return $next($request);
    }
}</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">/** Request处理基类 **/
namespace App\Http\Requests;

use Illuminate\Http\Request;
use App\Exceptions\ResponseException;
use Validator;

class BaseRequest
{
    protected $input;
    protected $method;

    public function __construct(Request $request, String $method)
    {
        $this-&gt;input = $request-&gt;all();
        $this-&gt;method = $method;
    }

    public function rules()
    {
        return [];
    }

    public function messages()
    {
        return [];
    }

    public function validate()
    {
        $rules = array_get($this-&gt;rules(), $this-&gt;method, []);
        $messages = array_get($this-&gt;messages(), $this-&gt;method, []);
        $validator = Validator::make($this-&gt;input, $rules, $messages);
        if ($validator-&gt;fails()) {
            $err = $validator-&gt;errors()-&gt;all();
            throw new ResponseException(head($err));
        }

        return true;
    }
}</code></pre></div>
<p>下面结合实际的例子来讲解:</p>

<blockquote>
<p>请求url: /user/get?id=1 <br />
对应处理的controller@function: UserController@get <br /></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">/** 那么对应的UserRequest */
namespace App\Http\Requests;

use App\ErrorCode;
use App\Http\Requests\BaseRequest;

class UserRequest extends BaseRequest
{
    public function rules()
    {
        return [
            &#39;get&#39; =&gt; [
                &#39;id&#39; =&gt; &#39;required|integer&#39;,
            ]
        ];
    }

    public function messages()
    {
        return [
            &#39;get&#39; =&gt; [
                &#39;id.required&#39; =&gt; ErrorCode::PARAM_MISS,
                &#39;id.integer&#39; =&gt; ErrorCode::PARAM_ERROR,
            ]
        ];
    }
}</code></pre></div>
<p>当/user/get?id=1被访问时，首先会进入<code>ValidatorMiddleware-&gt;handle</code>方法中，<code>$request-&gt;route()[1]['uses']</code>会返回<code>App\Http\Controllers\UserController@get</code>, 所以代码先会去找有没有对应的<code>App\Http\Requests\UserRequest</code>, 如果有则会去执行它的validate方法。下面我们看UserRequest，它里面并没有validate，但是它继承了BaseRequest，所以我们再看BaseRequest的validate，这里的代码就比较熟悉了，就是我们之前调用Lumen的Validator类进行参数验证的逻辑了，由于在new UserRequest时指定了method参数，所以在验证时会去取方法对应的验证规则进行参数验证，如果失败则会抛出我们自定义的异常，最后，我们只要在<code>Exception\Handler</code>中处理自定义的异常就好了。</p>

<p>口水了一大堆，下面总结一下，核心思想如下：</p>

<blockquote>
<p>Controllers目录同级下会多出一个Requests目录，每个controller都会有对应的request类，request类中会有rules、messages（对应Validator类的验证规则和返回消息）俩个二维数组，一维的键值对应要处理的controller的方法，二维对应具体规则和消息。引用ValidatorMiddleware中间件统一处理接口请求，通过自定义异常类处理错误返回。</p>
</blockquote>

<p>参考了Laravel China社区各位大神的设计，结合了下自己项目中的场景，设计了以上方案，欢迎大家拍砖。</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://laravel-china.org/topics/3137/design-of-shared-verification-rule-layer" target="_blank">https://laravel-china.org/topics/3137/design-of-shared-verification-rule-layer</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>php通过定义JSON Schema来校验对应JSON的格式数据</title>
            <link>/posts/2017/03/01/json-schema-validate/</link>
            <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
            
            <guid>/posts/2017/03/01/json-schema-validate/</guid>
            <description>最近项目中遇到的需求，对于某JSON类型的字段，要做验证的格式校验，并且标出错误的地方。
本着不要重复造轮子的原则，在github上找到了这个项目
 通过定义固定格式的JSON Schema来验证对应格式的数据。
https://github.com/justinrainbow/json-schema
 具体的使用方法就不多说啦，通过composer安装，参照示例就好。
主要说一下JSON Schema文件的定义问题，👇结合一个比较复杂的例子来说一下Schema各个参数的作用
{ &amp;#34;title&amp;#34;: &amp;#34;Product set&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;array&amp;#34;, //原数据格式为数组 &amp;#34;minItems&amp;#34;: 1, //最少1个元素 &amp;#34;maxItems&amp;#34;: 10, //最多10个元素 &amp;#34;uniqueItems&amp;#34;: true, //数据重复判断 &amp;#34;items&amp;#34;: { &amp;#34;title&amp;#34;: &amp;#34;Product&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, //数组元素的值为对象 &amp;#34;properties&amp;#34;: { &amp;#34;id&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;The unique identifier for a product&amp;#34;, //id字段描述 &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //id的类型为string &amp;#34;pattern&amp;#34;: &amp;#34;^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$&amp;#34; //验证id是否符合该正则表达式的规则 }, &amp;#34;name&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //name的类型为string &amp;#34;maxLength&amp;#34;: 10 //最大长度为10 }, &amp;#34;url&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //url的类型为string &amp;#34;format&amp;#34;: &amp;#34;uri&amp;#34; //并且符合URI规则 }, &amp;#34;price&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;number&amp;#34;, //price的类型为number &amp;#34;minimum&amp;#34;: 0, //最小值为0 &amp;#34;exclusiveMinimum&amp;#34;: true //该字段为true时验证price&amp;gt;0,false时验证price&amp;gt;=0 }, &amp;#34;tags&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;, //tags的类型为string &amp;#34;enum&amp;#34;: [ //并且值为enum中之一 &amp;#34;food&amp;#34;, &amp;#34;fruit&amp;#34;, &amp;#34;juice&amp;#34; ] } }, &amp;#34;additionalProperties&amp;#34;: false, //不允许除了items.</description>
            <content type="html"><![CDATA[<p>最近项目中遇到的需求，对于某JSON类型的字段，要做验证的格式校验，并且标出错误的地方。</p>

<p>本着不要重复造轮子的原则，在github上找到了这个项目</p>

<blockquote>
<p>通过定义固定格式的JSON Schema来验证对应格式的数据。<br><a href="https://github.com/justinrainbow/json-schema" target="_blank">https://github.com/justinrainbow/json-schema</a></p>
</blockquote>

<p>具体的使用方法就不多说啦，通过composer安装，参照示例就好。</p>

<p>主要说一下JSON Schema文件的定义问题，👇结合一个比较复杂的例子来说一下Schema各个参数的作用</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Product set&#34;</span>,
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;array&#34;</span>,    <span style="color:#960050;background-color:#1e0010">//原数据格式为数组</span>
    <span style="color:#f92672">&#34;minItems&#34;</span>: <span style="color:#ae81ff">1</span>,  <span style="color:#960050;background-color:#1e0010">//最少1个元素</span>
    <span style="color:#f92672">&#34;maxItems&#34;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#960050;background-color:#1e0010">//最多10个元素</span>
    <span style="color:#f92672">&#34;uniqueItems&#34;</span>: <span style="color:#66d9ef">true</span>,    <span style="color:#960050;background-color:#1e0010">//数据重复判断</span>
    <span style="color:#f92672">&#34;items&#34;</span>: {
        <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Product&#34;</span>,
        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//数组元素的值为对象</span>
        <span style="color:#f92672">&#34;properties&#34;</span>: {
            <span style="color:#f92672">&#34;id&#34;</span>: {
                <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;The unique identifier for a product&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//id字段描述</span>
                <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//id的类型为string</span>
                <span style="color:#f92672">&#34;pattern&#34;</span>: <span style="color:#e6db74">&#34;^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$&#34;</span>   <span style="color:#960050;background-color:#1e0010">//验证id是否符合该正则表达式的规则</span>
            },
            <span style="color:#f92672">&#34;name&#34;</span>: {
                <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,    <span style="color:#960050;background-color:#1e0010">//name的类型为string</span>
                <span style="color:#f92672">&#34;maxLength&#34;</span>: <span style="color:#ae81ff">10</span> <span style="color:#960050;background-color:#1e0010">//最大长度为</span><span style="color:#ae81ff">10</span>
            },
            <span style="color:#f92672">&#34;url&#34;</span>: {
                <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//url的类型为string</span>
                <span style="color:#f92672">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;uri&#34;</span> <span style="color:#960050;background-color:#1e0010">//并且符合URI规则</span>
            },
            <span style="color:#f92672">&#34;price&#34;</span>: {
                <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;number&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//price的类型为number</span>
                <span style="color:#f92672">&#34;minimum&#34;</span>: <span style="color:#ae81ff">0</span>,   <span style="color:#960050;background-color:#1e0010">//最小值为0</span>
                <span style="color:#f92672">&#34;exclusiveMinimum&#34;</span>: <span style="color:#66d9ef">true</span>    <span style="color:#960050;background-color:#1e0010">//该字段为true时验证price&gt;</span><span style="color:#ae81ff">0</span>,<span style="color:#960050;background-color:#1e0010">false时验证price&gt;=0</span>
            },
            <span style="color:#f92672">&#34;tags&#34;</span>: {
                <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,   <span style="color:#960050;background-color:#1e0010">//tags的类型为string</span>
                <span style="color:#f92672">&#34;enum&#34;</span>: [   <span style="color:#960050;background-color:#1e0010">//并且值为enum中之一</span>
                    <span style="color:#e6db74">&#34;food&#34;</span>,
                    <span style="color:#e6db74">&#34;fruit&#34;</span>,
                    <span style="color:#e6db74">&#34;juice&#34;</span>
                ]
            }
        },
        <span style="color:#f92672">&#34;additionalProperties&#34;</span>: <span style="color:#66d9ef">false</span>, <span style="color:#960050;background-color:#1e0010">//不允许除了items.properties定义以外的字段</span>
        <span style="color:#f92672">&#34;required&#34;</span>: [<span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;price&#34;</span>] <span style="color:#960050;background-color:#1e0010">//id</span>,<span style="color:#960050;background-color:#1e0010">name,price字段必填</span>
    }
}</code></pre></div>
<p>还有更详细的JSON Schema文档说明见以下参考链接</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://github.com/justinrainbow/json-schema" target="_blank">https://github.com/justinrainbow/json-schema</a></li>
<li><a href="http://json-schema.org/" target="_blank">http://json-schema.org/</a>]</li>
<li><a href="https://spacetelescope.github.io/understanding-json-schema/index.html" target="_blank">https://spacetelescope.github.io/understanding-json-schema/index.html</a>]</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>基于Lumen框架构建基础的Web API服务</title>
            <link>/posts/2017/02/10/imooc-lumen-api/</link>
            <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
            
            <guid>/posts/2017/02/10/imooc-lumen-api/</guid>
            <description>巧合下跟慕课网有过合作，虽然后来因为个人工作时间的关系没有深入进行下去，但是也算借着这个机会锻炼一下自己，梳理了下自己所掌握的知识，在这里跟大家做个分享，欢迎大家指教。</description>
            <content type="html"><![CDATA[<p>巧合下跟慕课网有过合作，虽然后来因为个人工作时间的关系没有深入进行下去，但是也算借着这个机会锻炼一下自己，梳理了下自己所掌握的知识，在这里跟大家做个分享，欢迎大家指教。</p>

<p><embed src="//player.video.iqiyi.com/525b2979bc32af62bcf87e061b2efabd/0/0/w_19rtzde32t.swf-albumId=7525586809-tvId=7525586809-isPurchase=0-cnId=undefined" allowFullScreen="true" quality="high" width="480" height="350" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></p>
]]></content>
        </item>
        
        <item>
            <title>PHP最佳实践，规范，相关资源整理</title>
            <link>/posts/2017/01/03/php-doc/</link>
            <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>/posts/2017/01/03/php-doc/</guid>
            <description>标记整理下书签
 PHP
 PHP 手册 PHP The Right Way PHP-FIG PSR中文版  Laravel
 Laravel China Laravel 的中大型專案架構 胖胖Model減重的五個方法  Tools &amp;amp;&amp;amp; Docs
 对 REST 的理解 Mastering Markdown Awesome Mac APIDOC 简明 VIM 练级攻略   持续更新</description>
            <content type="html"><![CDATA[<p>标记整理下书签</p>

<ul>
<li><p>PHP</p>

<ul>
<li><a href="http://php.net/manual/zh/" target="_blank">PHP 手册</a></li>
<li><a href="http://laravel-china.github.io/php-the-right-way/" target="_blank">PHP The Right Way</a></li>
<li><a href="https://github.com/PizzaLiu/PHP-FIG" target="_blank">PHP-FIG PSR中文版</a></li>
</ul></li>

<li><p>Laravel</p>

<ul>
<li><a href="https://laravel-china.org/" target="_blank">Laravel China</a></li>
<li><a href="http://oomusou.io/laravel/laravel-architecture/" target="_blank">Laravel 的中大型專案架構</a></li>
<li><a href="http://slides.com/howtomakeaturn/model#/" target="_blank">胖胖Model減重的五個方法</a></li>
</ul></li>

<li><p>Tools &amp;&amp; Docs</p>

<ul>
<li><a href="http://blog.lyyw.info/2017/02/09/2017-02-09%20%E5%AF%B9rest%E7%9A%84%E7%90%86%E8%A7%A3/" target="_blank">对 REST 的理解</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank">Mastering Markdown</a></li>
<li><a href="https://jaywcjlove.github.io/awesome-mac/index.zh.html" target="_blank">Awesome Mac</a></li>
<li><a href="http://apidocjs.com/" target="_blank">APIDOC</a></li>
<li><a href="http://coolshell.cn/articles/5426.html" target="_blank">简明 VIM 练级攻略</a></li>
</ul></li>
</ul>

<p><em>持续更新</em></p>
]]></content>
        </item>
        
        <item>
            <title>一道有关MySQL查询语句的面试题</title>
            <link>/posts/2016/10/10/mysql-query/</link>
            <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/10/10/mysql-query/</guid>
            <description>最近闲来无事，突然想起来之前在群里看到的一个有关MySQL查询语句的面试题，跟大家分享，顺便留作备忘。
原始数据如下：
    id data name date     1 30 kael 20160718   2 30 soul 20160720   3 66 kael 20160719   4 52 soul 20160719   5 99 kael 20160720   6 82 soul 20160718     希望通过SQL语句得到如下结果：
    name Data_18 Data_19 Data_20     kael 30 66 99   soul 82 52 30     太久没写原生查询语句，暂时想到的SQL语句如下：</description>
            <content type="html"><![CDATA[<p>最近闲来无事，突然想起来之前在群里看到的一个有关MySQL查询语句的面试题，跟大家分享，顺便留作备忘。</p>

<p>原始数据如下：</p>

<blockquote>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">data</th>
<th align="center">name</th>
<th align="center">date</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">1</td>
<td align="center">30</td>
<td align="center">kael</td>
<td align="center">20160718</td>
</tr>

<tr>
<td align="center">2</td>
<td align="center">30</td>
<td align="center">soul</td>
<td align="center">20160720</td>
</tr>

<tr>
<td align="center">3</td>
<td align="center">66</td>
<td align="center">kael</td>
<td align="center">20160719</td>
</tr>

<tr>
<td align="center">4</td>
<td align="center">52</td>
<td align="center">soul</td>
<td align="center">20160719</td>
</tr>

<tr>
<td align="center">5</td>
<td align="center">99</td>
<td align="center">kael</td>
<td align="center">20160720</td>
</tr>

<tr>
<td align="center">6</td>
<td align="center">82</td>
<td align="center">soul</td>
<td align="center">20160718</td>
</tr>
</tbody>
</table>
</blockquote>

<p>希望通过SQL语句得到如下结果：</p>

<blockquote>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">Data_18</th>
<th align="center">Data_19</th>
<th align="center">Data_20</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">kael</td>
<td align="center">30</td>
<td align="center">66</td>
<td align="center">99</td>
</tr>

<tr>
<td align="center">soul</td>
<td align="center">82</td>
<td align="center">52</td>
<td align="center">30</td>
</tr>
</tbody>
</table>
</blockquote>

<p>太久没写原生查询语句，暂时想到的SQL语句如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> name,
(<span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">data</span> <span style="color:#66d9ef">FROM</span> <span style="color:#f92672">`</span>test<span style="color:#f92672">`</span> <span style="color:#66d9ef">AS</span> t1 <span style="color:#66d9ef">WHERE</span> t1.name <span style="color:#f92672">=</span> t.name <span style="color:#66d9ef">AND</span> date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;20160718&#39;</span>) <span style="color:#66d9ef">AS</span> Data_18,
(<span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">data</span> <span style="color:#66d9ef">FROM</span> <span style="color:#f92672">`</span>test<span style="color:#f92672">`</span> <span style="color:#66d9ef">AS</span> t2 <span style="color:#66d9ef">WHERE</span> t2.name <span style="color:#f92672">=</span> t.name <span style="color:#66d9ef">AND</span> date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;20160719&#39;</span>) <span style="color:#66d9ef">AS</span> Data_19,
(<span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">data</span> <span style="color:#66d9ef">FROM</span> <span style="color:#f92672">`</span>test<span style="color:#f92672">`</span> <span style="color:#66d9ef">AS</span> t3 <span style="color:#66d9ef">WHERE</span> t3.name <span style="color:#f92672">=</span> t.name <span style="color:#66d9ef">AND</span> date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;20160720&#39;</span>) <span style="color:#66d9ef">AS</span> Data_20
<span style="color:#66d9ef">FROM</span> <span style="color:#f92672">`</span>test<span style="color:#f92672">`</span> <span style="color:#66d9ef">AS</span> t <span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> name</code></pre></div>
<p>PS: 如果有更好的想法，欢迎与我交流。</p>
]]></content>
        </item>
        
        <item>
            <title>Lumen框架在同一域名多应用环境下的部署问题</title>
            <link>/posts/2016/08/25/lumen-application/</link>
            <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/08/25/lumen-application/</guid>
            <description> 在同一域名下部署多个应用时，使用Lumen框架遇到的问题 官方文档的推荐一般是通过配置网站的根目录至wwwroot/LUMEN/public/。如果服务器上只有Lumen一个应用是没有问题的，但是如果服务器上同时部署了多个应用，想通过wwwroot的相对路径http://DOMAIN/lumen/public/来访问框架url时就会出现NotFoundHttpException的异常。
根据错误提示，定位到文件LUMEN/vendor/laravel/lumen-framework/src/Concerns/RegistersExceptionHandlers.php中370行：
框架中的LUMEN/public/index.php默认是$app-&amp;gt;run();是不传$request的，对应调用的方法如下：
可见通过此方法获取的path，如果存在多应用的情况下，$this-&amp;gt;routes获取是错误的。
解决方法如下： 修改LUMEN/public/index.php为
$request = Illuminate\Http\Request::capture(); $app-&amp;gt;run($request); 参考
 https://segmentfault.com/a/1190000002724037 https://segmentfault.com/a/1190000004460637 http://stackoverflow.com/questions/29728973/notfoundhttpexception-with-lumen  </description>
            <content type="html"><![CDATA[

<h3 id="在同一域名下部署多个应用时-使用lumen框架遇到的问题"><strong>在同一域名下部署多个应用时，使用Lumen框架遇到的问题</strong></h3>

<p>官方文档的推荐一般是通过配置网站的根目录至<code>wwwroot/LUMEN/public/</code>。如果服务器上只有Lumen一个应用是没有问题的，但是如果服务器上同时部署了多个应用，想通过<code>wwwroot</code>的相对路径<code>http://DOMAIN/lumen/public/</code>来访问框架url时就会出现<code>NotFoundHttpException</code>的异常。</p>

<p>根据错误提示，定位到文件<code>LUMEN/vendor/laravel/lumen-framework/src/Concerns/RegistersExceptionHandlers.php</code>中370行：</p>


    <img src="/assets/images/lumen-application-1.jpg"  data-action="zoom" alt="lumen-application-1"  class="center"  />



    <img src="/assets/images/lumen-application-2.jpg"  data-action="zoom" alt="lumen-application-2"  class="center"  />


<p>框架中的LUMEN/public/index.php默认是<code>$app-&gt;run();</code>是不传$request的，对应调用的方法如下：</p>


    <img src="/assets/images/lumen-application-3.jpg"  data-action="zoom" alt="lumen-application-3"  class="center"  />


<p>可见通过此方法获取的path，如果存在多应用的情况下，$this-&gt;routes获取是错误的。</p>

<h3 id="解决方法如下"><strong>解决方法如下：</strong></h3>

<p>修改<code>LUMEN/public/index.php</code>为</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$request = Illuminate\Http\Request::capture();
$app-&gt;run($request);</code></pre></div>
<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="https://segmentfault.com/a/1190000002724037" target="_blank">https://segmentfault.com/a/1190000002724037</a></li>
<li><a href="https://segmentfault.com/a/1190000004460637" target="_blank">https://segmentfault.com/a/1190000004460637</a></li>
<li><a href="http://stackoverflow.com/questions/29728973/notfoundhttpexception-with-lumen" target="_blank">http://stackoverflow.com/questions/29728973/notfoundhttpexception-with-lumen</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>PHP使用CURL访问HTTPS</title>
            <link>/posts/2016/08/08/php-curl-https/</link>
            <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/08/08/php-curl-https/</guid>
            <description>最近新上线的项目准备升级服务支持https访问，记录下使用curl方法访问https时遇到的问题。
直接上代码:
function post($url, $param) { $ssl = substr($url, 0, 8) == &amp;#34;https://&amp;#34; ? true : false; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); if ($ssl) { curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 信任任何证书 curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // 检查证书中是否设置域名 // $cacert = getcwd() . &amp;#39;/cacert.pem&amp;#39;; //CA根证书 // curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true); // 只信任CA颁布的证书 // curl_setopt($ch, CURLOPT_CAINFO, $cacert); // CA根证书（用来验证的网站证书是否是CA颁布） // curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); // 检查证书中是否设置域名，并且是否与提供的主机名匹配 } curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_POSTFIELDS, $param); $return = curl_exec($ch); curl_close($ch); return $return; } 简单来说访问https时，只要指定CURLOPT_SSL_VERIFYPEER和CURLOPT_SSL_VERIFYHOST为false就能支持访问了。当然也可以下载对应的根证书，然后在请求中带上访问也可以。</description>
            <content type="html"><![CDATA[<p>最近新上线的项目准备升级服务支持https访问，记录下使用curl方法访问https时遇到的问题。</p>

<p>直接上代码:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">function post($url, $param)
{
    $ssl = substr($url, 0, 8) == &#34;https://&#34; ? true : false;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    if ($ssl) {
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 信任任何证书
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // 检查证书中是否设置域名

        // $cacert = getcwd() . &#39;/cacert.pem&#39;; //CA根证书
        // curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);   // 只信任CA颁布的证书
        // curl_setopt($ch, CURLOPT_CAINFO, $cacert); // CA根证书（用来验证的网站证书是否是CA颁布）
        // curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); // 检查证书中是否设置域名，并且是否与提供的主机名匹配
    }
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $param);

    $return = curl_exec($ch);

    curl_close($ch);
    return $return;
}</code></pre></div>
<p>简单来说访问https时，只要指定<code>CURLOPT_SSL_VERIFYPEER</code>和<code>CURLOPT_SSL_VERIFYHOST</code>为<code>false</code>就能支持访问了。当然也可以下载对应的根证书，然后在请求中带上访问也可以。</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="http://php.net/manual/zh/function.curl-setopt.php" target="_blank">http://php.net/manual/zh/function.curl-setopt.php</a></li>
<li><a href="http://blog.csdn.net/linvo/article/details/8816079" target="_blank">http://blog.csdn.net/linvo/article/details/8816079</a></li>
<li><a href="http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites" target="_blank">http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Lumen / Laravel .env</title>
            <link>/posts/2016/07/20/lumen-env/</link>
            <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/07/20/lumen-env/</guid>
            <description> 最近在使用Lumen框架部署上线时遇到的一个问题 Lumen / Laravel 中的.env文件里一般配置着各种环境所对应的配置，例如：db，cache等配置，官方的推荐是版本库中保留一个.env.example，各个环境cp .env.example的配置并配上对应环境的配置生成.env文件，完成项目的部署。
但实际应用中会遇到一个比较尴尬的问题是：如果新增或修改了配置，需要手动到对应环境上去改配置，一般的测试或者开发环境还好，但是对应线上生产或者预发布环境，一般是不允许手动修改文件的。而且也有可能线上的机器较多，手动一个个去操作不方便也不安全。而且像现在一般也都是使用自动化上线工具，拉版本库代码直接上线，此时官方推荐的做法就不是很适用了。
既然满足不了自己的需求，那就稍微改造一下吧。 初步的思路是: 把各个环境的配置文件都放到版本库里，然后代码里判断出各个环境，加载对应的环境配置。
首先我们来看看lumen是如何运行的，通过分析lumen的入口文件LUMEN/public/idnex.php，我们看到它引用了 LUMEN/bootstrap/app.php 这个文件。 然后在LUMEN/bootstrap/app.php中，完成了Dotenv类的初始化 通过查看Dotenv类的源码，我们可以知道构造函数的俩个参数的含义
 .env文件所在的目录 文件名  了解了如上的信息后，我们就可以开始自己的改动啦。 首先在版本库里新建
 .env.local .env.test .env.production  通过获得服务器的hostname来得到对应的环境，然后load对应的.env文件就好了。
参考
 http://developers.ph/laravel-framework/laravel-5/how-to-setup-multiple-environment-for-laravel-5-developers-way  </description>
            <content type="html"><![CDATA[

<h3 id="最近在使用lumen框架部署上线时遇到的一个问题"><strong>最近在使用Lumen框架部署上线时遇到的一个问题</strong></h3>

<p>Lumen / Laravel 中的.env文件里一般配置着各种环境所对应的配置，例如：db，cache等配置，官方的推荐是版本库中保留一个.env.example，各个环境cp .env.example的配置并配上对应环境的配置生成.env文件，完成项目的部署。</p>

<p>但实际应用中会遇到一个比较尴尬的问题是：如果新增或修改了配置，需要手动到对应环境上去改配置，一般的测试或者开发环境还好，但是对应线上生产或者预发布环境，一般是不允许手动修改文件的。而且也有可能线上的机器较多，手动一个个去操作不方便也不安全。而且像现在一般也都是使用自动化上线工具，拉版本库代码直接上线，此时官方推荐的做法就不是很适用了。</p>

<p>既然满足不了自己的需求，那就稍微改造一下吧。
初步的思路是: <strong>把各个环境的配置文件都放到版本库里，然后代码里判断出各个环境，加载对应的环境配置。</strong></p>

<p>首先我们来看看lumen是如何运行的，通过分析lumen的入口文件<code>LUMEN/public/idnex.php</code>，我们看到它引用了 <code>LUMEN/bootstrap/app.php</code> 这个文件。

    <img src="/assets/images/lumen-index.jpg"  data-action="zoom" alt="lumen-index"  class="center"  />
</p>

<p>然后在LUMEN/bootstrap/app.php中，完成了Dotenv类的初始化

    <img src="/assets/images/lumen-bootstrap-app.jpg"  data-action="zoom" alt="lumen-bootstrap-app"  class="center"  />
</p>

<p>通过查看Dotenv类的源码，我们可以知道构造函数的俩个参数的含义</p>

<ol>
<li>.env文件所在的目录</li>
<li>文件名</li>
</ol>


    <img src="/assets/images/lumen-phpdotenv.jpg"  data-action="zoom" alt="lumen-phpdotenv"  class="center"  />


<p>了解了如上的信息后，我们就可以开始自己的改动啦。
首先在版本库里新建</p>

<ul>
<li>.env.local</li>
<li>.env.test</li>
<li>.env.production</li>
</ul>


    <img src="/assets/images/lumen-bootstrap-app-new.jpg"  data-action="zoom" alt="lumen-bootstrap-app-new"  class="center"  />


<p>通过获得服务器的hostname来得到对应的环境，然后load对应的.env文件就好了。</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="http://developers.ph/laravel-framework/laravel-5/how-to-setup-multiple-environment-for-laravel-5-developers-way/" target="_blank">http://developers.ph/laravel-framework/laravel-5/how-to-setup-multiple-environment-for-laravel-5-developers-way</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Lumen CORS</title>
            <link>/posts/2016/06/30/lumen-cors/</link>
            <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/06/30/lumen-cors/</guid>
            <description>使用Lumen框架如何解决跨域问题 跨域问题想必是每个从事web相关开发的同学经常遇到的问题，特别是现在越来越多的应用采用的前后端分离的开发模式，所以解决跨域问题成了大家必不可少的一项技能。最近在使用Lumen框架开发时也遇到了这个问题。
进入主题之前我们先来个铺垫，首先我们来了解一下什么是跨域，以及一些解决方案 这是铺垫
有兴趣的同学可以仔细看看，其实W3C标准的解决方案是只要在服务器response的头部带上Access-Control-Allow-Origin：DOMAIN(允许跨域访问的域名，*代表所有)，不过需要一提的是该方案只支持IE8及以上，以及一些现代浏览器(Fire Fox,Chrome,etc.)。解决跨域比较常见的还有使用jsonp，但这不是本文重点，这里就不具体展开了。
好了，上面啰嗦了那么多，下面进入主题，那么在Lumen框架中，我们怎么解决跨域问题呢? 这边主要参考了这里该大神的方案。 通过运用框架的Middleware和ServiceProvider来解决跨域问题。
新增中间件，LUMEN/app/Http/Middleware/CorsMiddleware.php
namespace App\Http\Middleware; use Closure; class CorsMiddleware { /** * Handle an incoming request. * * @param \Illuminate\Http\Request $request * @param \Closure $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); $response-&amp;gt;header(&amp;#39;Access-Control-Allow-Methods&amp;#39;, &amp;#39;HEAD, GET, POST, PUT, PATCH, DELETE&amp;#39;); $response-&amp;gt;header(&amp;#39;Access-Control-Allow-Headers&amp;#39;, $request-&amp;gt;header(&amp;#39;Access-Control-Request-Headers&amp;#39;)); $response-&amp;gt;header(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;); return $response; } } 定义ServiceProvider，LUMEN/app/Providers/CatchAllOptionsRequestsProvider.php
namespace App\Providers; use Illuminate\Support\ServiceProvider; /** * If the incoming request is an OPTIONS request * we will register a handler for the requested route */ class CatchAllOptionsRequestsProvider extends ServiceProvider { public function register() { $request = app(&amp;#39;request&amp;#39;); if ($request-&amp;gt;isMethod(&amp;#39;OPTIONS&amp;#39;)) { app()-&amp;gt;options($request-&amp;gt;path(), function() { return response(&amp;#39;&amp;#39;, 200)-&amp;gt;header(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;); }); } } } 在LUMEN/bootstrap/app.</description>
            <content type="html"><![CDATA[

<h3 id="使用lumen框架如何解决跨域问题"><strong>使用Lumen框架如何解决跨域问题</strong></h3>

<p>跨域问题想必是每个从事web相关开发的同学经常遇到的问题，特别是现在越来越多的应用采用的前后端分离的开发模式，所以解决跨域问题成了大家必不可少的一项技能。最近在使用Lumen框架开发时也遇到了这个问题。</p>

<p>进入主题之前我们先来个铺垫，首先我们来了解一下什么是跨域，以及一些解决方案 <a href="http://www.cnblogs.com/davidwang456/p/3977627.html" target="_blank">这是铺垫</a></p>

<p>有兴趣的同学可以仔细看看，其实W3C标准的解决方案是只要在服务器response的头部带上<code>Access-Control-Allow-Origin：DOMAIN</code>(允许跨域访问的域名，<code>*</code>代表所有)，不过需要一提的是该方案只支持IE8及以上，以及一些现代浏览器(Fire Fox,Chrome,etc.)。解决跨域比较常见的还有使用jsonp，但这不是本文重点，这里就不具体展开了。</p>

<p>好了，上面啰嗦了那么多，下面进入主题，那么在Lumen框架中，我们怎么解决跨域问题呢?
这边主要参考了<a href="https://gist.github.com/danharper/06d2386f0b826b669552" target="_blank">这里</a>该大神的方案。
通过运用框架的Middleware和ServiceProvider来解决跨域问题。</p>

<p>新增中间件，<code>LUMEN/app/Http/Middleware/CorsMiddleware.php</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">namespace App\Http\Middleware;

use Closure;

class CorsMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        $response = $next($request);

        $response-&gt;header(&#39;Access-Control-Allow-Methods&#39;, &#39;HEAD, GET, POST, PUT, PATCH, DELETE&#39;);
        $response-&gt;header(&#39;Access-Control-Allow-Headers&#39;, $request-&gt;header(&#39;Access-Control-Request-Headers&#39;));
        $response-&gt;header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);

        return $response;
    }
}</code></pre></div>
<p>定义ServiceProvider，<code>LUMEN/app/Providers/CatchAllOptionsRequestsProvider.php</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">namespace App\Providers;

use Illuminate\Support\ServiceProvider;

/**
 * If the incoming request is an OPTIONS request
 * we will register a handler for the requested route
 */
class CatchAllOptionsRequestsProvider extends ServiceProvider
{
	public function register()
	{
	    $request = app(&#39;request&#39;);

	    if ($request-&gt;isMethod(&#39;OPTIONS&#39;))
	    {
	    	app()-&gt;options($request-&gt;path(), function() {
	    		return response(&#39;&#39;, 200)-&gt;header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);
	    	});
	    }
  	}
}</code></pre></div>
<p>在<code>LUMEN/bootstrap/app.php</code>中加载对应的中间件，注册ServiceProvider。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$app-&gt;routeMiddleware([
    &#39;cors&#39; =&gt; App\Http\Middleware\CorsMiddleware::class,
]);
...
$app-&gt;register(App\Providers\CatchAllOptionsRequestsProvider::class);</code></pre></div>
<p>看到这里，问题是已经解决了。但有一个问题我开始一直想不明白，CatchAllOptionsRequestsProvider存在的意义是什么，为什么需要单独处理OPTIONS的请求？不是一个中间件就可以全部处理了吗？
github上也有人跟我有同样的疑问

    <img src="/assets/images/lumen-cors-1.jpg"  data-action="zoom" alt="lumen-bootstrap-app"  class="center"  />
</p>

<p>直到前段时间再去看时才看到下面这位大神的评论

    <img src="/assets/images/lumen-cors-2.jpg"  data-action="zoom" alt="lumen-bootstrap-app"  class="center"  />
</p>

<p>在结合上面的铺垫，原来</p>

<blockquote>
<p>CORS (Cross-Origin Resource Sharing)，W3C制定的跨站资源分享标准。post前会产生一次options嗅探（称之为preflight，但简单请求不会出现）来确认有否跨域请求的权限。</p>
</blockquote>

<p>由于在Lumen的路由里并未定义对应的options请求，所以框架直接返回405了。请求并不会被分发，所以不会被中间件处理。因此才需要用<code>CatchAllOptionsRequestsProvider.php</code>来获取请求，并对options的请求单独处理。</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.cnblogs.com/davidwang456/p/3977627.html" target="_blank">http://www.cnblogs.com/davidwang456/p/3977627.html</a></li>
<li><a href="https://gist.github.com/danharper/06d2386f0b826b669552" target="_blank">https://gist.github.com/danharper/06d2386f0b826b669552</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>php5.6 curl 上传文件失败</title>
            <link>/posts/2016/04/05/php-curlfile/</link>
            <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
            
            <guid>/posts/2016/04/05/php-curlfile/</guid>
            <description>php5.6 CURLFile 新项目中要完成一个上传文件的接口，要写个自测接口时遇到的坑。。。
之前php5.4版本时curl中直接通过@符号+文件路径，则curl自动会把文件解析上传，后端通过$_FILES变量拿到，但在写自测脚本时死活没反应。。。纠结了半天才在 stackoverflow 找到答案。
原来新版php中CURLOPT_SAFE_UPLOAD参数默认已经是true了，所以不支持@这样（不安全）的写法，而是通过CURLFile类来完成模拟文件上传。代码如下:
if ((version_compare(PHP_VERSION, &amp;#39;5.5&amp;#39;) &amp;gt;= 0)) { $aPost[&amp;#39;file&amp;#39;] = new CURLFile($localFile); curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true); } else { $aPost[&amp;#39;file&amp;#39;] = &amp;#34;@&amp;#34;.$localFile; } $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $apiurl); curl_setopt($ch, CURLOPT_TIMEOUT, 120); curl_setopt($ch, CURLOPT_BUFFERSIZE, 128); curl_setopt($ch, CURLOPT_POSTFIELDS, $aPost); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $sResponse = curl_exec ($ch); 当然了，如果不想使用CURLFile方法也是可以的，手动设置CURLOPT_SAFE_UPLOAD为false后，@+文件又能支持了（一般php版本升级兼容处理采用此方式改动成本较小）</description>
            <content type="html"><![CDATA[

<h3 id="php5-6-curlfile">php5.6 CURLFile</h3>

<p>新项目中要完成一个上传文件的接口，要写个自测接口时遇到的坑。。。</p>

<p>之前php5.4版本时curl中直接通过@符号+文件路径，则curl自动会把文件解析上传，后端通过$_FILES变量拿到，但在写自测脚本时死活没反应。。。纠结了半天才在 <a href="http://stackoverflow.com/questions/25934128/curl-file-uploads-not-working-anymore-after-upgrade-from-php-5-5-to-5-6" target="_blank">stackoverflow</a> 找到答案。</p>

<p>原来新版php中<code>CURLOPT_SAFE_UPLOAD</code>参数默认已经是true了，所以不支持@这样（不安全）的写法，而是通过CURLFile类来完成模拟文件上传。代码如下:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">if ((version_compare(PHP_VERSION, &#39;5.5&#39;) &gt;= 0)) {
    $aPost[&#39;file&#39;] = new CURLFile($localFile);
    curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);
} else {
    $aPost[&#39;file&#39;] = &#34;@&#34;.$localFile;
}

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $apiurl);
curl_setopt($ch, CURLOPT_TIMEOUT, 120);
curl_setopt($ch, CURLOPT_BUFFERSIZE, 128);
curl_setopt($ch, CURLOPT_POSTFIELDS, $aPost);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$sResponse = curl_exec ($ch);</code></pre></div>
<p>当然了，如果不想使用CURLFile方法也是可以的，手动设置<code>CURLOPT_SAFE_UPLOAD</code>为false后，@+文件又能支持了（一般php版本升级兼容处理采用此方式改动成本较小）</p>
]]></content>
        </item>
        
        <item>
            <title>Swagger初探</title>
            <link>/posts/2015/12/25/swagger/</link>
            <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
            
            <guid>/posts/2015/12/25/swagger/</guid>
            <description>缘由 最近项目要加新功能，回头看了下之前定义的接口文档，简直不忍直视。有用txt的、有用word的，各种格式不规范，写法也不一样，看起来很头疼。不够直观，并且也很难维护。想起之前同事分享过的Swagger，趁着最近不忙，就决定着手把之前的API文档整理到Swagger中去。
Swagger是什么  官方的介绍是 A POWERFUL INTERFACE TO YOUR API。
 通过Swagger提供的相关tools可以很直观的在网页上浏览你的API、测试API、甚至通过解析Swagger definitions（一个YAML or JSON格式的文档），直接自动生成相关代码（swagger-codegen）。个人理解Swagger的核心就是Swagger definitions，相关工具可以（Swagger Core、Swagger Editor）生成Swagger definitions，（Swagger UI、Swagger Editor）解析Swagger definitions生成UI界面。
为什么要用Swagger 工具从来都是为了提高效率而产生的，想想从前光写个API文档都要花好些时间，而且其中还会出现理解上的偏差，需要前后端反复沟通确认，不仅浪费了时间还没有什么效率。通过使用Swagger，我们既可以用它来作为API的文档，也可以用来测试API，前端 or 客户端的同学通过对各个API的点击可以实时的看到返回结果，节约了大量的沟通时间，极大的提高了开发效率。
怎么用 Swagger Api 提供了如下工具来为我们服务:
 Swagger Core [Java-related libraries for generating and reading Swagger definitions] 一个JAVA Lib，用来生成和解析Swagger definitions，没用过。。
 Swagger Codegen [Command-line tool for generating both client and server side code from a Swagger definition] 据说可以通过它解析Swagger definitions生成对应的后端API实现代码，没用过。。
 Swagger UI [Browser based UI for exploring a Swagger defined API] 通过解析定义好的Swagger definitions构建对应的API UI界面。 GitHub - Swagger UI。 GitHub里的说明基本都已经很详细了，这里就不多做介绍了。基本上只要你预先装好npm(node)和gulp，直接照着步骤就没什么问题。对应的demo - petstore.</description>
            <content type="html"><![CDATA[

<h4 id="缘由"><strong>缘由</strong></h4>

<p>最近项目要加新功能，回头看了下之前定义的接口文档，简直不忍直视。有用txt的、有用word的，各种格式不规范，写法也不一样，看起来很头疼。不够直观，并且也很难维护。想起之前同事分享过的Swagger，趁着最近不忙，就决定着手把之前的API文档整理到Swagger中去。</p>

<hr />

<h4 id="swagger是什么-http-swagger-io"><strong><a href="http://swagger.io" target="_blank">Swagger是什么</a></strong></h4>

<blockquote>
<p>官方的介绍是 A POWERFUL INTERFACE TO YOUR API。</p>
</blockquote>

<p>通过Swagger提供的相关tools可以很直观的在网页上浏览你的API、测试API、甚至通过解析Swagger definitions（一个YAML or JSON格式的文档），直接自动生成相关代码（swagger-codegen）。个人理解Swagger的核心就是Swagger definitions，相关工具可以（Swagger Core、Swagger Editor）生成Swagger definitions，（Swagger UI、Swagger Editor）解析Swagger definitions生成UI界面。</p>

<hr />

<h4 id="为什么要用swagger"><strong>为什么要用Swagger</strong></h4>

<p>工具从来都是为了提高效率而产生的，想想从前光写个API文档都要花好些时间，而且其中还会出现理解上的偏差，需要前后端反复沟通确认，不仅浪费了时间还没有什么效率。通过使用Swagger，我们既可以用它来作为API的文档，也可以用来测试API，前端 or 客户端的同学通过对各个API的点击可以实时的看到返回结果，节约了大量的沟通时间，极大的提高了开发效率。</p>

<hr />

<h4 id="怎么用"><strong>怎么用</strong></h4>

<p><a href="https://github.com/swagger-api" target="_blank">Swagger Api</a> 提供了如下工具来为我们服务:</p>

<ul>
<li><p><em>Swagger Core</em> [Java-related libraries for generating and reading Swagger definitions]
一个JAVA Lib，用来生成和解析Swagger definitions，没用过。。</p></li>

<li><p><em>Swagger Codegen</em> [Command-line tool for generating both client and server side code from a Swagger definition]
据说可以通过它解析Swagger definitions生成对应的后端API实现代码，没用过。。</p></li>

<li><p><em>Swagger UI</em> [Browser based UI for exploring a Swagger defined API]
通过解析定义好的Swagger definitions构建对应的API UI界面。
<a href="https://github.com/swagger-api/swagger-ui" target="_blank">GitHub - Swagger UI</a>。
GitHub里的说明基本都已经很详细了，这里就不多做介绍了。基本上只要你预先装好npm(node)和gulp，直接照着步骤就没什么问题。对应的demo - <a href="http://petstore.swagger.io/" target="_blank">petstore.swagger.io</a>，在这里可以看见构建好的应用的样子，也可以通过解析自己定义的Swagger definitions来查看自己定义的API，不过需要注意的是，基本上都会遇到跨域的问题，这里个人建议是把Swagger UI构建在自己的服务器上，这样就可以避免了。最后上张完成图。

    <img src="/assets/images/swagger-ui-example.jpg"  data-action="zoom" alt="swagger-ui-example"  class="center"  />
</p></li>

<li><p><em>Swagger Editor</em> [Browser based editor for authoring Swagger definitions in YAML or JSON format]
上面很多地方都提到了Swagger definitions，那究竟Swagger definitions要如何定义呢。Swagger Editor提供了web界面来帮我们编辑、生成（导出）对应的Swagger definitions，同时Swagger Editor也可以实时的解析编辑好的Swagger definitions，生成对应的UI界面（类似Swagger UI），不仅如此Swagger Editor还支持生成对应client code（总之是一个很强大的工具，基本上用它就能满足我们的需求了）</p>

<p>同样的对应的<a href="https://github.com/swagger-api/swagger-editor" target="_blank">GitHub - Swagger Editor</a>，安装方式大同小异，线上demo - <a href="http://editor.swagger.io/" target="_blank">editor.swagger.io</a>，同样的也会有跨域的问题。</p>

<h2 id="hahahugoshortcode-s1-hbhb">
    <img src="/assets/images/swagger-editor-example.jpg"  data-action="zoom" alt="swagger-editor-example"  class="center"  />
</h2></li>
</ul>

<h4 id="写在最后"><strong>写在最后</strong></h4>

<p>关于具体的Swagger definitions如何定义就得参照官方文档了，我只用过一个enum参数，实现了请求参数的select选项。最后吐槽下，关于Swagger的基本上都是英文文档，中文资料较少，导致最后在实现自己需求时花费了不少时间，实际上仅仅是配一个参数就好了T T。</p>
]]></content>
        </item>
        
        <item>
            <title>MongoDB使用心得</title>
            <link>/posts/2015/12/08/mongodb/</link>
            <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
            
            <guid>/posts/2015/12/08/mongodb/</guid>
            <description>首先MongoDB是什么 区别于传统的关系型数据库（MySQL），MongoDB是NoSQL类型的数据库，是一个基于分布式【文件】存储的开源数据库系统。MongoDB将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB文档类似于 JSON（BSON）对象。字段值可以包含其他文档，数组及文档数组。所有的数据对于MongoDB来说都是文档，不存在传统关系型数据的字段限制，这就意味这你同一个document中的每条数据可能字段都会不一样，非常灵活（维护困难）。
MongoDB的特点  面向文件的 高性能 高可用性 易扩展性 丰富的查询语言  我们能用MongoDB做什么 由于MongoDB不支持事务，对数据一致性要求较高的业务（如银行业务，应用核心业务等）并不适用。对于其他个人网站（数据类型简单），日志分析类型业务（写入量大）等都和适合，甚至也可以把他当做缓存使用。
怎么用 要用好MongoDB，首先你应该忘记你学过的那些优雅无敌的SQL，忘记传统的范式化设计。 举个栗子： 一个业务场景是，保存图书馆内的所有书和其作者的相关信息。 在使用传统的范式化关系型数据设计中，我们可能会有1张book表和1张author表
#book: { &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;5124b5d86041c7dca81917&amp;#34;), &amp;#34;title&amp;#34; : &amp;#34;如何使用MongoDB&amp;#34;, &amp;#34;author&amp;#34; : [ ObjectId(&amp;#34;144b5d83041c7dca84416&amp;#34;), ObjectId(&amp;#34;144b5d83041c7dca84418&amp;#34;), ] } #author: { [ &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;144b5d83041c7dca84416&amp;#34;), &amp;#34;name&amp;#34; : &amp;#34;张三&amp;#34;, &amp;#34;age&amp;#34; : &amp;#34;30&amp;#34;, &amp;#34;sex&amp;#34; : &amp;#34;male&amp;#34; ], [ &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;144b5d83041c7dca84418&amp;#34;), &amp;#34;name&amp;#34; : &amp;#34;李四&amp;#34;, &amp;#34;age&amp;#34; : &amp;#34;28&amp;#34;, &amp;#34;sex&amp;#34; : &amp;#34;female&amp;#34; ], ... } 这种设计的坏处是，查询时要join效率会比较差
如果是采用MongoDB来处理，完全可以这样：
{ &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;5124b5d86041c7dca81917&amp;#34;), &amp;#34;title&amp;#34; : &amp;#34;如何使用MongoDB&amp;#34;, &amp;#34;author&amp;#34; : [ { &amp;#34;name&amp;#34; : &amp;#34;张三&amp;#34;, &amp;#34;age&amp;#34; : &amp;#34;30&amp;#34;, &amp;#34;sex&amp;#34; : &amp;#34;male&amp;#34; }, { &amp;#34;name&amp;#34; : &amp;#34;李四&amp;#34;, &amp;#34;age&amp;#34; : &amp;#34;28&amp;#34;, &amp;#34;sex&amp;#34; : &amp;#34;female&amp;#34; }, ] } 这样通过这一个document就可以得到我们想要的信息。当然，任何事物都是有两面性的，如果遇到要更新author信息时，就要批量更新所有document对应的信息了，前面也提到过，不要盲目使用MongoDB，要针对自己所处的业务类型来选择。</description>
            <content type="html"><![CDATA[

<h4 id="首先mongodb是什么"><strong>首先MongoDB是什么</strong></h4>

<p>区别于传统的关系型数据库（MySQL），MongoDB是NoSQL类型的数据库，是一个基于分布式【文件】存储的开源数据库系统。MongoDB将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB文档类似于 JSON（BSON）对象。字段值可以包含其他文档，数组及文档数组。所有的数据对于MongoDB来说都是文档，不存在传统关系型数据的字段限制，这就意味这你同一个document中的每条数据可能字段都会不一样，非常灵活（维护困难）。</p>

<hr />

<h4 id="mongodb的特点"><strong>MongoDB的特点</strong></h4>

<ul>
<li>面向文件的</li>
<li>高性能</li>
<li>高可用性</li>
<li>易扩展性</li>
<li>丰富的查询语言</li>
</ul>

<hr />

<h4 id="我们能用mongodb做什么"><strong>我们能用MongoDB做什么</strong></h4>

<p>由于MongoDB不支持事务，对数据一致性要求较高的业务（如银行业务，应用核心业务等）并不适用。对于其他个人网站（数据类型简单），日志分析类型业务（写入量大）等都和适合，甚至也可以把他当做缓存使用。</p>

<hr />

<h4 id="怎么用"><strong>怎么用</strong></h4>

<p>要用好MongoDB，首先你应该忘记你学过的那些优雅无敌的SQL，忘记传统的范式化设计。
举个栗子：
一个业务场景是，保存图书馆内的所有书和其作者的相关信息。
在使用传统的范式化关系型数据设计中，我们可能会有1张book表和1张author表</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#book:</span>
<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;_id&#34;</span> : ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;5124b5d86041c7dca81917&#34;</span><span style="color:#f92672">)</span>,
    <span style="color:#e6db74">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;如何使用MongoDB&#34;</span>,
    <span style="color:#e6db74">&#34;author&#34;</span> : <span style="color:#f92672">[</span>
        ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;144b5d83041c7dca84416&#34;</span><span style="color:#f92672">)</span>,
        ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;144b5d83041c7dca84418&#34;</span><span style="color:#f92672">)</span>,
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span>
<span style="color:#75715e">#author:</span>
<span style="color:#f92672">{</span>
    <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;_id&#34;</span> : ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;144b5d83041c7dca84416&#34;</span><span style="color:#f92672">)</span>,
        <span style="color:#e6db74">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;张三&#34;</span>,
        <span style="color:#e6db74">&#34;age&#34;</span> : <span style="color:#e6db74">&#34;30&#34;</span>,
        <span style="color:#e6db74">&#34;sex&#34;</span> : <span style="color:#e6db74">&#34;male&#34;</span>
    <span style="color:#f92672">]</span>,
    <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;_id&#34;</span> : ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;144b5d83041c7dca84418&#34;</span><span style="color:#f92672">)</span>,
        <span style="color:#e6db74">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;李四&#34;</span>,
        <span style="color:#e6db74">&#34;age&#34;</span> : <span style="color:#e6db74">&#34;28&#34;</span>,
        <span style="color:#e6db74">&#34;sex&#34;</span> : <span style="color:#e6db74">&#34;female&#34;</span>
    <span style="color:#f92672">]</span>,
    ...
<span style="color:#f92672">}</span></code></pre></div>
<p>这种设计的坏处是，查询时要join效率会比较差</p>

<p>如果是采用MongoDB来处理，完全可以这样：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;_id&#34;</span> : ObjectId<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;5124b5d86041c7dca81917&#34;</span><span style="color:#f92672">)</span>,
    <span style="color:#e6db74">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;如何使用MongoDB&#34;</span>,
    <span style="color:#e6db74">&#34;author&#34;</span> : <span style="color:#f92672">[</span>
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;张三&#34;</span>,
            <span style="color:#e6db74">&#34;age&#34;</span> : <span style="color:#e6db74">&#34;30&#34;</span>,
            <span style="color:#e6db74">&#34;sex&#34;</span> : <span style="color:#e6db74">&#34;male&#34;</span>
        <span style="color:#f92672">}</span>,
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;李四&#34;</span>,
            <span style="color:#e6db74">&#34;age&#34;</span> : <span style="color:#e6db74">&#34;28&#34;</span>,
            <span style="color:#e6db74">&#34;sex&#34;</span> : <span style="color:#e6db74">&#34;female&#34;</span>
        <span style="color:#f92672">}</span>,
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>这样通过这一个document就可以得到我们想要的信息。当然，任何事物都是有两面性的，如果遇到要更新author信息时，就要批量更新所有document对应的信息了，前面也提到过，不要盲目使用MongoDB，要针对自己所处的业务类型来选择。</p>
]]></content>
        </item>
        
        <item>
            <title>Redis::OPT_SERIALIZER</title>
            <link>/posts/2015/10/20/redis-option/</link>
            <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
            
            <guid>/posts/2015/10/20/redis-option/</guid>
            <description>标记一个最近使用redis遇到的坑 背景： php-redis版本: 2.2.1 新老项目使用的封装PHP Redis类不一样(主要是以下选项)：
$redis-&amp;gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY); 导致使用设置过该option的封装的Redis类获取由未设置该选项的Redis类生成的key时程序会down掉，反之获取的key值为乱码。
解决方案: 暂时没想到更好的方案，目前的解决方式是统一redis中的键值，将老项目中用的redis key全delete掉 统一使用新的Redis类生成</description>
            <content type="html"><![CDATA[

<h3 id="标记一个最近使用redis遇到的坑"><strong>标记一个最近使用redis遇到的坑</strong></h3>

<h4 id="背景"><strong>背景</strong>：</h4>

<p>php-redis版本: <code>2.2.1</code>
新老项目使用的封装PHP Redis类不一样(主要是以下选项)：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$redis-&gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY);</code></pre></div>
<p>导致使用设置过该option的封装的Redis类获取由未设置该选项的Redis类生成的key时程序会down掉，反之获取的key值为乱码。</p>

<hr />

<h4 id="解决方案"><strong>解决方案</strong>:</h4>

<p>暂时没想到更好的方案，目前的解决方式是统一redis中的键值，将老项目中用的redis key全delete掉 统一使用新的Redis类生成</p>
]]></content>
        </item>
        
        <item>
            <title>开篇日志</title>
            <link>/posts/2015/09/30/hello-world/</link>
            <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
            
            <guid>/posts/2015/09/30/hello-world/</guid>
            <description>分享一个生成树的方法
function list_to_tree($list, $pk=&amp;#39;id&amp;#39;, $pid = &amp;#39;pid&amp;#39;, $child = &amp;#39;_child&amp;#39;, $root = 0) { // 创建Tree $tree = array(); if(is_array($list)) { // 创建基于主键的数组引用 $refer = array(); foreach ($list as $key =&amp;gt; $data) { $refer[$data[$pk]] =&amp;amp; $list[$key]; } foreach ($list as $key =&amp;gt; $data) { // 判断是否存在parent $parentId = $data[$pid]; if ($root == $parentId) { $tree[] =&amp;amp; $list[$key]; }else{ if (isset($refer[$parentId])) { $parent =&amp;amp; $refer[$parentId]; $parent[$child][] =&amp;amp; $list[$key]; } } } } return $tree; }</description>
            <content type="html"><![CDATA[<p><code>分享一个生成树的方法</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">function list_to_tree($list, $pk=&#39;id&#39;, $pid = &#39;pid&#39;, $child = &#39;_child&#39;, $root = 0) {
	// 创建Tree
	$tree = array();
	if(is_array($list)) {
    	// 创建基于主键的数组引用
        $refer = array();
        foreach ($list as $key =&gt; $data) {
            $refer[$data[$pk]] =<span style="color:#960050;background-color:#1e0010">&amp;</span> $list[$key];
        }
        foreach ($list as $key =&gt; $data) {
            // 判断是否存在parent
            $parentId =  $data[$pid];
            if ($root == $parentId) {
                $tree[] =<span style="color:#960050;background-color:#1e0010">&amp;</span> $list[$key];
            }else{
                if (isset($refer[$parentId])) {
                    $parent =<span style="color:#960050;background-color:#1e0010">&amp;</span> $refer[$parentId];
                    $parent[$child][] =<span style="color:#960050;background-color:#1e0010">&amp;</span> $list[$key];
                }
            }
        }
    }
    return $tree;
}</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
